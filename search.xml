<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/08/hello_world/</url>
    <content><![CDATA[<h1 id="一个新的开始"><a href="#一个新的开始" class="headerlink" title="一个新的开始"></a>一个新的开始</h1><blockquote>
<p>“我所有的欲望和沉思，都是这个宇宙缓缓呼出的气流。在这漫长的呼气结束之前，我的思维将一直存在。”</p>
</blockquote>
<p>​    几经周折终于面前搭建好了属于自己的博客，一个属于自己的空间。长久以来，我与外界的关系是作为一个消费者，消费物质和内容。2021年希望自己可以做一个生产者，创作者，把博客作为方法，输出和记录一些内容。</p>
<p><img src="https://i.loli.net/2021/04/09/4OQIETdyGWwLYbX.png" alt="rosie_2560_1600.png">    </p>
<p>:)</p>
<p>Hello world.</p>
]]></content>
      <categories>
        <category>my_space</category>
      </categories>
      <tags>
        <tag>say_something</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux代码编译过程</title>
    <url>/2021/04/09/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Linux下Hello-World的前生今世"><a href="#Linux下Hello-World的前生今世" class="headerlink" title="Linux下Hello World的前生今世"></a>Linux下Hello World的前生今世</h1><h2 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a>代码引入</h2><p>hello.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[],<span class="keyword">char</span> *envp[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>linux环境下我们可以通过GCC编译hello.c:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -g hello.c -o hello</span><br></pre></td></tr></table></figure>

<p>当前目录先会生成hello可执行文件。</p>
<h3 id="main函数的三个参数"><a href="#main函数的三个参数" class="headerlink" title="main函数的三个参数"></a>main函数的三个参数</h3><p>int argc</p>
<p>int型变量，表示传递给main函数的参数数量。</p>
<p>char *argv</p>
<p>指针数组，每个指针指向各个具体的参数。</p>
<p>char*envp</p>
<p>环境变量，可以为程序运行过程中需要使用环境变量做参考。</p>
<p>Demo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./hello   //执行该文件</span><br></pre></td></tr></table></figure>

<p>此时argc=1,表示只有一个参数输入</p>
<p>argv只有一个元素,argv[0]指向输入程序路径及名称: ./hello</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./hello para_1</span><br></pre></td></tr></table></figure>

<p>此时argc=2,有两个参数传入</p>
<p>argc[0]指向输入程序路径及名称 “./hello”</p>
<p>argv[1]指向para_1字符串</p>
<h3 id="what’s-gcc"><a href="#what’s-gcc" class="headerlink" title="what’s gcc"></a>what’s gcc</h3><p>GCC是GNU Compiler Collection的缩写，GCC是一系列编译器的集合，是Linux操作系统的核心组件之一。GCC最初名为GNU C Compiler，当时它只是一款C语言的编译器，不过随着后续迭代，它支持C++、Fortran、Go等语言，GCC也因此成为一个编译器集合。GCC有以下特点：</p>
<ul>
<li><p>GCC支持的编程语言多。比如，<code>g++</code>是C++编译器，<code>gfortran</code>是Fortran编译器。</p>
</li>
<li><p>GCC支持的硬件全。GCC可以将源代码编译成x86_64、ARM、PowerPC等硬件架构平台的可执行文件。</p>
</li>
<li><p>GCC支持众多业界标准。GCC能很快支持最新的C++标准，GCC支持OpenMP、OpenACC。</p>
</li>
</ul>
<h2 id="编译过程分析"><a href="#编译过程分析" class="headerlink" title="编译过程分析"></a>编译过程分析</h2><p><img src="https://i.loli.net/2021/04/09/6Mdc9ytguaYkOZ4.png" alt="linux编译过程.png"></p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理器CPP工具进行预处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cpp hello.c -o hello.i</span><br></pre></td></tr></table></figure>

<p>预编译主要处理源代码中以<code>#</code>开始的预编译指令，主要处理规则如下：</p>
<ul>
<li>处理<code>#include </code>预编译指令，将被包含的文件插入到该预编译指令的位置。这是一个递归的过程，如果被包含的文件还包含了其他文件，会递归地完成这个过程。</li>
<li>处理条件预编译指令，比如<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code>。</li>
<li>删除<code>#define</code>，展开所有宏定义。</li>
<li>添加行号和文件名标识，以便于在编译过程中产生编译错误或者调试时都能够生成行号信息。</li>
</ul>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>gcc对预处理后的hello.i文件惊醒编译。编译的过程主要是进行词法分析、语法分析、语义分析，这背后涉及编译原理等一些内容。这里只进行编译，不汇编，可以生成硬件平台相关的汇编语言。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -S hello.i -o hello.s</span><br></pre></td></tr></table></figure>

<p>它包含一个汇编语言程序，即将C语言程序编译成汇编语言程序。</p>
<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ as hello.s -o hello.o</span><br></pre></td></tr></table></figure>

<p>as工具将hello.s文件翻译为二进制代码。</p>
<p>虽然这个文件已经是二进制的机器码了，但是它仍然不能执行，因为它缺少系统运行所必须的库，比如C语言<code>printf()</code>对应的汇编语言的<code>puts</code>函数。确切的说，系统还不知道<code>puts</code>函数在内存中的具体位置。如果我们在一份源代码中使用了外部的函数或者变量，还需要重要的一步：链接。</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc hello.o -o hello</span><br></pre></td></tr></table></figure>

<p>该命令是基于<strong>动态链接</strong>的方式，生成的<code>hello</code>已经是一个可执行文件。实际上，这个命令隐藏了很多背后的内容。</p>
<p><code>main()</code>方法是C语言程序的入口，<code>crt1.o</code>这几个库是在处理<code>main()</code>方法调用之前和程序退出之后的事情，这需要与操作系统协作。在Linux中，一个新的程序都是由父进程调用<code>fork()</code>，生成一个子进程，然后再调用<code>execve()</code>，将可执行文件加载进来，才能被操作系统执行。所以，准确地说，<code>main()</code>方法是这个程序的入口，但仅仅从<code>main()</code>方法开始，并不能顺利执行这个程序。</p>
<p>链接器将多个目标文件合并成一个可执行目标文件，这个二进制文件包含加载程序到内存并运行的所有信息。</p>
<p>链接过程主要包含了两个步骤：</p>
<ol>
<li><p><strong>地址与空间分配（Address and Storage Allocation）</strong></p>
<p>这个过程中， 扫描所有的输入目标文件，获得它们的各个节的长度、属性、位置，并将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，统一放到一个全局的符号表。这一步，链接器能够获得所有输入目标文件的节的长度，并将它们合并，计算出输出文件中各个节合并后的长度与位置，并建立映射关系。</p>
<p>这里引入可执行目标文件的概念。</p>
<p><img src="https://i.loli.net/2021/04/10/rPaJSl5UQHMc16s.png" alt="EOF.png"></p>
<p>.text:已编译程序的机器代码</p>
<p>.rodata:只读数据</p>
<p>.data:已初始化的全局和静态C变量</p>
<p>.bss:未初始化的全局和静态C变量</p>
<p>.symtab: 符号表，存放在程序中定义和引用的函数和全局变量的信息</p>
<p>.debug:调试符号表</p>
<p>可执行文件中的段是由目标文件中的节合并而来的，以下是链接器如何将它们的各个节合并到输出文件，也即输出文件中的空间如何分配给输入文件的两种方式。</p>
<p><strong>顺序叠加</strong></p>
<p><img src="https://i.loli.net/2021/04/10/4gsBqv7fHbFXjMT.png" alt="elf1.png"></p>
<p>虽然这种方法非常简单，但是它存在一个问题：在有很多输入文件的情况下，输出文件会有很多零散的节。这种做法非常浪费空间，因为每个节都需要有一定的地址和空间对齐要求。x86硬件的对齐要求是4KB。如果一个节的大小只有1个字节，它也要在内存在重用4KB。这样会造成大量内部碎片。所以不是一个好的方案。</p>
<p><strong>合并相似节</strong></p>
<p>一个更加实际的方法便是合并相同性质的节，比如：将所有输入文件的 <strong><code>.text</code>节</strong>合并到输出文件的 <strong><code>text</code>段</strong>（注意，此时出现了段和节两个概念），如下图所示。</p>
<p><img src="https://i.loli.net/2021/04/10/s5acwxbHEJCvldq.png" alt="elf2.png"></p>
<p>其中<code>.bss</code>节在目标文件和可执行文件中不占用文件的空间，但是它在装载时占用地址空间。事实上，这里的<strong>空间和地址</strong>有两层含义:</p>
<ol>
<li>在输出的可执行文件中的空间</li>
<li>在装载后的虚拟地址中的空间</li>
</ol>
<p>对于有实际数据的节，如<code>.text</code>和<code>.data</code>，它们在文件中和虚拟地址中都要分配空间，因为它们在这两者中都存在；对于<code>.bss</code>来，分配空间的意义只局限于虚拟地址空间，因为它在文件中并没有内容。<strong>我们在这里谈到的空间分配只关注于虚拟地址空间（见下图）的分配</strong>，因为这关系到链接器后面的关于地址计算的步骤，而可执行文件本身的空间分配与链接的关系并不大。</p>
<p><img src="https://i.loli.net/2021/04/10/FP4Nlwm1QWxpgzs.png" alt="dizhi.png"></p>
<p>现在的链接器空间分配的策略基本上都采用“合并相似节”的方法，使用这种方法的链接器一般采用一种叫 <strong>两步链接（Two-pass Linking）</strong> 的方法。即整个链接过程分为地址与空间分配和符号解析、重定位。</p>
</li>
<li><p><strong>符号解析（Symbol Resolution）</strong>和<strong>重定位（Relocation）</strong></p>
<p>使用前一步中收集到的所有信息，读取输入文件中节的输数据、重定位信息，并且进行符号解析与重定位、调整代码、调整代码中的地址等。重定位是链接过程的核心。在地址与空间分配步骤完成之后，相似权限的节会被合并成段，并生成了 <strong>程序头表（Program Header Table）</strong> 结构。如下图可执行文件结构所示，主要生成两个段：代码段（ <code>text</code>段）、数据段（ <code>data</code>段 ）。</p>
<p><img src="https://i.loli.net/2021/04/10/JASN3iGExlVrhv8.png" alt="different-elf-type.png"></p>
<p><img src="https://i.loli.net/2021/04/10/4gsBqv7fHbFXjMT.png" alt="elf1.png"></p>
<p><strong>符号解析</strong></p>
<p>重定位的过程是伴随着符号解析的，这里先介绍符号解析。</p>
<p>链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来。对那些和引用定义在相同模块的局部符号的引用，符号解析是非常简单的。编译器只允许每个模块中每个局部符号有一个定义。静态局部变量也会有本地链接器符号，编译器还要确保它们拥有唯一的名字。</p>
<p>然而，对于全局符号的解析要复杂得多。当编译器遇到一个不是在当前模块中定义的符号（变量或函数名）时，会假设该符号是在其他某个模块中定义的，生成一个链接器符号表条目，并把它交给链接器处理。如果链接器在它的任何输入模块中都找不到这个被引用符号的定义，就输出一条错误信息并终止。</p>
<p>多重定义的全局符号解析在此不做介绍。</p>
<p><strong>重定位</strong></p>
<p>链接的前两步完成之后，链接器就已经确定所有符号的虚拟地址了，那么链接器就可以根据符号的地址对每个需要重定位的指令进行地址修正。</p>
<p>那么链接器如何知道哪些指令是要被调整的呢？事实上，我们前面提到的ELF文件中的 <strong>重定位表（Relocation Table）</strong> 专门用来保存这些与重定位相关的信息。</p>
<p>对于可重定位的ELF文件来说，它必须包含重定位表，用来描述如何修改相应的节的内容。对于每个要被重定位的ELF节都有一个对应的重定位表。如果<code>.text</code>节需要被重定位，则会有一个相对应叫<code>.rel.text</code>的节保存了代码节的重定位表；如果<code>.data</code>节需要被重定位，则会有一个相对应的<code>.rel.tdata</code>的节保存了数据节的重定位表。</p>
</li>
</ol>
<p>链接可分为静态链接和动态链接</p>
<h5 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h5><p>简单来说，静态链接就是在程序加载前，将所依赖的第三方库函数都打包到了一起，形成一个非常大的可执行文件。如下图所示为最基本的静态链接过程示意图。每个模块的源代码文件（如<code>.c</code>）文件经过编译器编译成<strong>目标文件</strong>（Object File，一般扩展名为<code>.o</code>或<code>.obj</code>）。目标文件和 <strong>库（Library）</strong> 一起链接形成最终的可执行文件。其中，最常见的库就是<strong>运行时库（Runtime Library）</strong>，它是支持程序运行的基本函数的集合。<strong>库本质上是一组目标文件的包，由一些最常用的代码编译成目标文件后打包而成</strong>。</p>
<p><img src="https://i.loli.net/2021/04/10/Cy1xEdQl6TVZqwS.png" alt="linking.jpg"></p>
<h5 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h5><p>动态链接是在运行时，发现用到某些库中的某些函数时，再从这些第三方库中读取自己所需的方法。</p>
<p><strong>动态链接的基本实现</strong></p>
<p>动态链接涉及运行时的链接以及多个文件的装载，必需要有操作系统的支持。因为动态链接的情况下，进程的虚拟地址空间的分布会比静态链接情况下更为复杂，还有一些存储管理、内存共享、进程线程等机制在动态链接下也会有一些微妙的变化。</p>
<p>目前，主流操作系统都支持动态链接。在Linux中，ELF动态链接文件被称为 <strong>动态共享对象（DSO，Dynamic Shared Objects）</strong>，一般以<code>.so</code>为后缀；在Windows中，动态链接文件被称为 <strong>动态链接库（Dynamic Linking Library）</strong>，一般以<code>.dll</code>为后缀。</p>
<p>在Linux中，常用的C语言库的运行库glibc，其动态链接形式的版本保留在 <code>/lib</code>目录下，文件名为 <code>libc.so</code>。整个系统只保留一份C语言动态链接文件<code>libc.so</code>，所有的C语言编写的、动态链接的程序都可以在运行时使用它。当程序被装载时，系统的<strong>动态链接器</strong>会将程序所需要的所有动态链接库装载到进程的地址空间，并将程序中所有未解析的符号绑定到相应的动态链接库中，并进行重定位。</p>
<p><strong>动态链接程序运行时地址空间分布</strong></p>
<p>对于静态链接的可执行文件来说，整个进程只有一个文件要被映射，即可执行文件。而对于动态链接，除了可执行文件，还有它所依赖的共享目标文件。</p>
<p>关于共享目标文件在内存中的地址分配，主要有两种解决方案，分别是：</p>
<ul>
<li><strong>静态共享库（Static Shared Library）</strong>（地址固定）</li>
<li><strong>动态共享库（Dynamic Shared Libary）</strong>（地址不固定）</li>
</ul>
<p><strong>静态共享库</strong></p>
<p>静态共享库的做法是将程序的各个模块统一交给操作系统进行管理，操作系统在<strong>某个特定的地址</strong>划分出一些地址块，为那些已知的模块预留足够的空间。因为这个地址对于不同的应用程序来说，都是固定的，所以称之为<strong>静态</strong>。</p>
<p>但是静态共享库的目标地址会导致地址冲突、升级等问题。</p>
<p><strong>动态共享库</strong></p>
<p>采用动态共享库的方式，也称为<strong>装载时重定位（Load Time Relocation）</strong>。其基本思路是：<strong>在链接时，对所有绝对地址的引用都不作重定位，而把这一步推迟到装载时再完成。一旦模块装载地址确定，即目标地址确定，那么系统就对程序中所有的绝对地址引用进行重定位。</strong></p>
<p>但是这种方式也存在一些问题。比如，动态链接模块被装载映射至虚拟空间后，指令部分是在多个进程间共享的，由于装载时重定位的方法需要修改指令，所以没有办法做到同一份指令被多个进程共享，因为指令被重定位后对于每个进程来说都是不同的。</p>
<p>然后，动态链接库中的代码是共享的，但是其中的可修改数据部分对于不同进程来说是由多个副本的。基于此，一种名为<strong>地址无关代码</strong>的技术被提出以克服这个问题。</p>
<p><strong>与地址无关</strong></p>
<p>无论何种操作系统上，使用动态链接生成的目标文件中凡是涉及第三方库的函数调用都是<strong>地址无关</strong>的。我们自己编写的程序名为hello.c，hello.c中调用了C标准库的<code>printf()</code>，在生成的目标文件中，不会立即确定<code>printf()</code>的具体地址，而是在运行时去装载这个函数，在装载阶段确定<code>printf()</code>的地址。这里提到的地址指的是进程在内存上的虚拟地址。动态链接库的函数地址在编译时是不确定的，在装载时，装载器根据当前地址空间情况，动态地分配一块虚拟地址空间。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在会写一个C程序，也要了解一个C代码是如何从ASCII文件一步步变为可执行文件的过程。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>编译过程</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-25646堆溢出漏洞复现及分析</title>
    <url>/2021/04/10/CVE-2021-3156/</url>
    <content><![CDATA[<h1 id="CVE-2021-25646堆溢出漏洞复现及分析"><a href="#CVE-2021-25646堆溢出漏洞复现及分析" class="headerlink" title="CVE-2021-25646堆溢出漏洞复现及分析"></a>CVE-2021-25646堆溢出漏洞复现及分析</h1>]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>堆溢出</tag>
        <tag>CVE-2021-3156</tag>
      </tags>
  </entry>
</search>
